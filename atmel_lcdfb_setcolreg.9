.TH "atmel_lcdfb_setcolreg" 9 "atmel_lcdfb_setcolreg" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
atmel_lcdfb_setcolreg \- Optional function. Sets a color register.
.SH SYNOPSIS
.B "int" atmel_lcdfb_setcolreg
.BI "(unsigned int regno "  ","
.BI "unsigned int red "  ","
.BI "unsigned int green "  ","
.BI "unsigned int blue "  ","
.BI "unsigned int transp "  ","
.BI "struct fb_info *info "  ");"
.SH ARGUMENTS
.IP "regno" 12
Which register in the CLUT we are programming
.IP "red" 12
The red value which can be up to 16 bits wide
.IP "green" 12
The green value which can be up to 16 bits wide
.IP "blue" 12
The blue value which can be up to 16 bits wide.
.IP "transp" 12
If supported the alpha value which can be up to 16 bits wide.
.IP "info" 12
frame buffer info structure

Set a single color register. The values supplied have a 16 bit
magnitude which needs to be scaled in this function for the hardware.
Things to take into consideration are how many color registers, if
any, are supported with the current color visual. With truecolor mode
no color palettes are supported. Here a pseudo palette is created
which we store the value in pseudo_palette in struct fb_info. For
pseudocolor mode we have a limited color palette. To deal with this
we can program what color is displayed for a particular pixel value.
DirectColor is similar in that we can program each color field. If
we have a static colormap we don't need to implement this function.

Returns negative errno on error, or zero on success. In an
ideal world, this would have been the case, but as it turns
out, the other drivers return 1 on failure, so that's what
we're going to do.
