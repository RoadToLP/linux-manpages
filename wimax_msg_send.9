.TH "wimax_msg_send" 9 "wimax_msg_send" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
wimax_msg_send \- Send a pre-allocated message to user space
.SH SYNOPSIS
.B "int" wimax_msg_send
.BI "(struct wimax_dev *wimax_dev "  ","
.BI "struct sk_buff *skb "  ");"
.SH ARGUMENTS
.IP "wimax_dev" 12
WiMAX device descriptor
.IP "skb" 12
\fIstruct sk_buff\fP returned by \fBwimax_msg_alloc\fP. Note the
ownership of \fIskb\fP is transferred to this function.
.SH "RETURN"
0 if ok, < 0 errno code on error
.SH "DESCRIPTION"

Sends a free-form message that was preallocated with
\fBwimax_msg_alloc\fP and filled up.

Assumes that once you pass an skb to this function for sending, it
owns it and will release it when done (on success).

IMPORTANT:

Don't use \fBskb_push\fP/\fBskb_pull\fP/\fBskb_reserve\fP on the skb, as
\fBwimax_msg_send\fP depends on skb->data being placed at the
beginning of the user message.

Unlike other WiMAX stack calls, this call can be used way early,
even before \fBwimax_dev_add\fP is called, as long as the
wimax_dev->net_dev pointer is set to point to a proper
net_dev. This is so that drivers can use it early in case they need
to send stuff around or communicate with user space.
