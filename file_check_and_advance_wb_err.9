.TH "file_check_and_advance_wb_err" 9 "file_check_and_advance_wb_err" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
file_check_and_advance_wb_err \- report wb error (if any) that was previously and advance wb_err to current one
.SH SYNOPSIS
.B "int" file_check_and_advance_wb_err
.BI "(struct file *file "  ");"
.SH ARGUMENTS
.IP "file" 12
struct file on which the error is being reported
.SH "DESCRIPTION"
When userland calls fsync (or something like nfsd does the equivalent), we
want to report any writeback errors that occurred since the last fsync (or
since the file was opened if there haven't been any).

Grab the wb_err from the mapping. If it matches what we have in the file,
then just quickly return 0. The file is all caught up.

If it doesn't match, then take the mapping value, set the "seen" flag in
it and try to swap it into place. If it works, or another task beat us
to it with the new value, then update the f_wb_err and return the error
portion. The error at this point must be reported via proper channels
(a'la fsync, or NFS COMMIT operation, etc.).

While we handle mapping->wb_err with atomic operations, the f_wb_err
value is protected by the f_lock since we must ensure that it reflects
the latest value swapped in for this file descriptor.
.SH "RETURN"
0 on success, negative error code otherwise.
