.TH "get_next_freq" 9 "get_next_freq" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
get_next_freq \- Compute a new frequency for a given cpufreq policy.
.SH SYNOPSIS
.B "unsigned int" get_next_freq
.BI "(struct sugov_policy *sg_policy "  ","
.BI "unsigned long util "  ","
.BI "unsigned long max "  ");"
.SH ARGUMENTS
.IP "sg_policy" 12
schedutil policy object to compute the new frequency for.
.IP "util" 12
Current CPU utilization.
.IP "max" 12
CPU capacity.
.SH "DESCRIPTION"
If the utilization is frequency-invariant, choose the new frequency to be
proportional to it, that is

next_freq = C * max_freq * util / max

Otherwise, approximate the would-be frequency-invariant utilization by
util_raw * (curr_freq / max_freq) which leads to

next_freq = C * curr_freq * util_raw / max

Take C = 1.25 for the frequency tipping point at (util / max) = 0.8.

The lowest driver-supported frequency which is equal or greater than the raw
next_freq (as calculated above) is returned, subject to policy min/max and
cpufreq driver limitations.
