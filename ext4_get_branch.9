.TH "ext4_get_branch" 9 "ext4_get_branch" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
ext4_get_branch \- read the chain of indirect blocks leading to data
.SH SYNOPSIS
.B "Indirect *" ext4_get_branch
.BI "(struct inode *inode "  ","
.BI "int depth "  ","
.BI "ext4_lblk_t *offsets "  ","
.BI "Indirect chain[4] "  ","
.BI "int *err "  ");"
.SH ARGUMENTS
.IP "inode" 12
inode in question
.IP "depth" 12
depth of the chain (1 - direct pointer, etc.)
.IP "offsets" 12
offsets of pointers in inode/indirect blocks
.IP "chain" 12
place to store the result
.IP "err" 12
here we store the error value

Function fills the array of triples <key, p, bh> and returns NULL
if everything went OK or the pointer to the last filled triple
(incomplete one) otherwise. Upon the return chain[i].key contains
the number of (i+1)-th block in the chain (as it is stored in memory,
i.e. little-endian 32-bit), chain[i].p contains the address of that
number (it points into struct inode for i==0 and into the bh->b_data
for i>0) and chain[i].bh points to the buffer_head of i-th indirect
block for i>0 and NULL for i==0. In other words, it holds the block
numbers of the chain, addresses they were taken from (and where we can
verify that chain did not change) and buffer_heads hosting these
numbers.

Function stops when it stumbles upon zero pointer (absent block)
(pointer to last triple returned, *\fIerr\fP == 0)
or when it gets an IO error reading an indirect block
(ditto, *\fIerr\fP == -EIO)
or when it reads all \fIdepth\fP-1 indirect blocks successfully and finds
the whole chain, all way to the data (returns NULL, *err == 0).

Need to be called with
down_read(\fIEXT4_I\fP(inode)->i_data_sem)
