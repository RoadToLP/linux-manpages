.TH "update_fast_timekeeper" 9 "update_fast_timekeeper" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
update_fast_timekeeper \- Update the fast and NMI safe monotonic timekeeper.
.SH SYNOPSIS
.B "void" update_fast_timekeeper
.BI "(const struct tk_read_base *tkr "  ","
.BI "struct tk_fast *tkf "  ");"
.SH ARGUMENTS
.IP "tkr" 12
Timekeeping readout base from which we take the update
.IP "tkf" 12
Pointer to NMI safe timekeeper
.SH "DESCRIPTION"
We want to use this from any context including NMI and tracing /
instrumenting the timekeeping code itself.

Employ the latch technique; see \fIraw_write_seqcount_latch\fP.

So if a NMI hits the update of base[0] then it will use base[1]
which is still consistent. In the worst case this can result is a
slightly wrong timestamp (a few nanoseconds). See
\fIktime_get_mono_fast_ns\fP.
