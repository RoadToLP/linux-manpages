.TH "acpi_parse_entries_array" 9 "acpi_parse_entries_array" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
acpi_parse_entries_array \- for each proc_num find a suitable subtable
.SH SYNOPSIS
.B "int" acpi_parse_entries_array
.BI "(char *id "  ","
.BI "unsigned long table_size "  ","
.BI "struct acpi_table_header *table_header "  ","
.BI "struct acpi_subtable_proc *proc "  ","
.BI "int proc_num "  ","
.BI "unsigned int max_entries "  ");"
.SH ARGUMENTS
.IP "id" 12
table id (for debugging purposes)
.IP "table_size" 12
size of the root table
.IP "table_header" 12
where does the table start?
.IP "proc" 12
array of acpi_subtable_proc struct containing entry id
and associated handler with it
.IP "proc_num" 12
how big proc is?
.IP "max_entries" 12
how many entries can we process?
.SH "DESCRIPTION"
For each proc_num find a subtable with proc->id and run proc->handler
on it. Assumption is that there's only single handler for particular
entry id.

The table_size is not the size of the complete ACPI table (the length
field in the header struct), but only the size of the root table; i.e.,
the offset from the very first byte of the complete ACPI table, to the
first byte of the very first subtable.

On success returns sum of all matching entries for all proc handlers.
Otherwise, -ENODEV or -EINVAL is returned.
