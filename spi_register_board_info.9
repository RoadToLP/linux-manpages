.TH "spi_register_board_info" 9 "spi_register_board_info" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
spi_register_board_info \- register SPI devices for a given board
.SH SYNOPSIS
.B "int" spi_register_board_info
.BI "(struct spi_board_info const *info "  ","
.BI "unsigned n "  ");"
.SH ARGUMENTS
.IP "info" 12
array of chip descriptors
.IP "n" 12
how many descriptors are provided
.SH "CONTEXT"
can sleep
.SH "DESCRIPTION"
Board-specific early init code calls this (probably during arch_initcall)
with segments of the SPI device table.  Any device nodes are created later,
after the relevant parent SPI controller (bus_num) is defined.  We keep
this table of devices forever, so that reloading a controller driver will
not make Linux forget about these hard-wired devices.

Other code can also call this, e.g. a particular add-on board might provide
SPI devices through its expansion connector, so code initializing that board
would naturally declare its SPI devices.

The board info passed can safely be __initdata ... but be careful of
any embedded pointers (platform_data, etc), they're copied as-is.
Device properties are deep-copied though.
.SH "RETURN"
zero on success, else a negative error code.
