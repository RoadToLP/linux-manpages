.TH "at91_poll_rx" 9 "at91_poll_rx" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
at91_poll_rx \- read multiple CAN messages from mailboxes
.SH SYNOPSIS
.B "int" at91_poll_rx
.BI "(struct net_device *dev "  ","
.BI "int quota "  ");"
.SH ARGUMENTS
.IP "dev" 12
net device
.IP "quota" 12
max number of pkgs we're allowed to receive
.SH "DESCRIPTION"
Theory of Operation:

About 3/4 of the mailboxes (\fBget_mb_rx_first\fP...\fBget_mb_rx_last\fP)
on the chip are reserved for RX. We split them into 2 groups. The
lower group ranges from \fBget_mb_rx_first\fP to \fBget_mb_rx_low_last\fP.

Like it or not, but the chip always saves a received CAN message
into the first free mailbox it finds (starting with the
lowest). This makes it very difficult to read the messages in the
right order from the chip. This is how we work around that problem:

The first message goes into mb nr. 1 and issues an interrupt. All
rx ints are disabled in the interrupt handler and a napi poll is
scheduled. We read the mailbox, but do _not_ re-enable the mb (to
receive another message).

lower mbxs      upper
____^______    __^__
/           \  /      * +-+-+-+-+-+-+-+-++-+-+-+-+
| |x|x|x|x|x|x|x|| | | | |
+-+-+-+-+-+-+-+-++-+-+-+-+
0 0 0 0 0 0  0 0 0 0 1 1  \ mail
0 1 2 3 4 5  6 7 8 9 0 1  / box
^
|
*     unused, due to chip bug

The variable priv->rx_next points to the next mailbox to read a
message from. As long we're in the lower mailboxes we just read the
mailbox but not re-enable it.

With completion of the last of the lower mailboxes, we re-enable the
whole first group, but continue to look for filled mailboxes in the
upper mailboxes. Imagine the second group like overflow mailboxes,
which takes CAN messages if the lower goup is full. While in the
upper group we re-enable the mailbox right after reading it. Giving
the chip more room to store messages.

After finishing we look again in the lower group if we've still
quota.
