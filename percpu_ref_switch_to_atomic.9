.TH "percpu_ref_switch_to_atomic" 9 "percpu_ref_switch_to_atomic" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
percpu_ref_switch_to_atomic \- switch a percpu_ref to atomic mode
.SH SYNOPSIS
.B "void" percpu_ref_switch_to_atomic
.BI "(struct percpu_ref *ref "  ","
.BI "percpu_ref_func_t *confirm_switch "  ");"
.SH ARGUMENTS
.IP "ref" 12
percpu_ref to switch to atomic mode
.IP "confirm_switch" 12
optional confirmation callback
.SH "DESCRIPTION"
There's no reason to use this function for the usual reference counting.
Use percpu_ref_kill[_and_confirm]().

Schedule switching of \fIref\fP to atomic mode.  All its percpu counts will
be collected to the main atomic counter.  On completion, when all CPUs
are guaraneed to be in atomic mode, \fIconfirm_switch\fP, which may not
block, is invoked.  This function may be invoked concurrently with all
the get/put operations and can safely be mixed with kill and reinit
operations.  Note that \fIref\fP will stay in atomic mode across kill/reinit
cycles until \fBpercpu_ref_switch_to_percpu\fP is called.

This function may block if \fIref\fP is in the process of switching to atomic
mode.  If the caller ensures that \fIref\fP is not in the process of
switching to atomic mode, this function can be called from any context.
