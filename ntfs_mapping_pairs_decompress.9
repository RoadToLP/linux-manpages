.TH "ntfs_mapping_pairs_decompress" 9 "ntfs_mapping_pairs_decompress" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
ntfs_mapping_pairs_decompress \- convert mapping pairs array to runlist
.SH SYNOPSIS
.B "runlist_element *" ntfs_mapping_pairs_decompress
.BI "(const ntfs_volume *vol "  ","
.BI "const ATTR_RECORD *attr "  ","
.BI "runlist_element *old_rl "  ");"
.SH ARGUMENTS
.IP "vol" 12
ntfs volume on which the attribute resides
.IP "attr" 12
attribute record whose mapping pairs array to decompress
.IP "old_rl" 12
optional runlist in which to insert \fIattr\fP's runlist
.SH "DESCRIPTION"
It is up to the caller to serialize access to the runlist \fIold_rl\fP.

Decompress the attribute \fIattr\fP's mapping pairs array into a runlist. On
success, return the decompressed runlist.

If \fIold_rl\fP is not NULL, decompressed runlist is inserted into the
appropriate place in \fIold_rl\fP and the resultant, combined runlist is
returned. The original \fIold_rl\fP is deallocated.

On error, return -errno. \fIold_rl\fP is left unmodified in that case.

The following error codes are defined:
-ENOMEM - Not enough memory to allocate runlist array.
-EIO    - Corrupt runlist.
-EINVAL - Invalid parameters were passed in.
-ERANGE - The two runlists overlap.

FIXME: For now we take the conceptionally simplest approach of creating the
new runlist disregarding the already existing one and then splicing the
two into one, if that is possible (we check for overlap and discard the new
runlist if overlap present before returning ERR_PTR(-ERANGE)).
