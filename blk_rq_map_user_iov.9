.TH "blk_rq_map_user_iov" 9 "blk_rq_map_user_iov" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
blk_rq_map_user_iov \- map user data to a request, for passthrough requests
.SH SYNOPSIS
.B "int" blk_rq_map_user_iov
.BI "(struct request_queue *q "  ","
.BI "struct request *rq "  ","
.BI "struct rq_map_data *map_data "  ","
.BI "const struct iov_iter *iter "  ","
.BI "gfp_t gfp_mask "  ");"
.SH ARGUMENTS
.IP "q" 12
request queue where request should be inserted
.IP "rq" 12
request to map data to
.IP "map_data" 12
pointer to the rq_map_data holding pages (if necessary)
.IP "iter" 12
iovec iterator
.IP "gfp_mask" 12
memory allocation flags
.SH "DESCRIPTION"
Data will be mapped directly for zero copy I/O, if possible. Otherwise
a kernel bounce buffer is used.

A matching \fBblk_rq_unmap_user\fP must be issued at the end of I/O, while
still in process context.
.SH "NOTE"
The mapped bio may need to be bounced through \fBblk_queue_bounce\fP
before being submitted to the device, as pages mapped may be out of
reach. It's the callers responsibility to make sure this happens. The
original bio must be passed back in to \fBblk_rq_unmap_user\fP for proper
unmapping.
