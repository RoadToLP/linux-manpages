.TH "ntfs_attr_find_vcn_nolock" 9 "ntfs_attr_find_vcn_nolock" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
ntfs_attr_find_vcn_nolock \- find a vcn in the runlist of an ntfs inode
.SH SYNOPSIS
.B "runlist_element *" ntfs_attr_find_vcn_nolock
.BI "(ntfs_inode *ni "  ","
.BI "const VCN vcn "  ","
.BI "ntfs_attr_search_ctx *ctx "  ");"
.SH ARGUMENTS
.IP "ni" 12
ntfs inode describing the runlist to search
.IP "vcn" 12
vcn to find
.IP "ctx" 12
active attribute search context if present or NULL if not
.SH "DESCRIPTION"
Find the virtual cluster number \fIvcn\fP in the runlist described by the ntfs
inode \fIni\fP and return the address of the runlist element containing the \fIvcn\fP.

If the \fIvcn\fP is not mapped yet, the attempt is made to map the attribute
extent containing the \fIvcn\fP and the vcn to lcn conversion is retried.

If \fIctx\fP is specified, it is an active search context of \fIni\fP and its base mft
record.  This is needed when \fBntfs_attr_find_vcn_nolock\fP encounters unmapped
runlist fragments and allows their mapping.  If you do not have the mft
record mapped, you can specify \fIctx\fP as NULL and \fBntfs_attr_find_vcn_nolock\fP
will perform the necessary mapping and unmapping.

Note, \fBntfs_attr_find_vcn_nolock\fP saves the state of \fIctx\fP on entry and
restores it before returning.  Thus, \fIctx\fP will be left pointing to the same
attribute on return as on entry.  However, the actual pointers in \fIctx\fP may
point to different memory locations on return, so you must remember to reset
any cached pointers from the \fIctx\fP, i.e. after the call to
\fBntfs_attr_find_vcn_nolock\fP, you will probably want to do:
m = ctx->mrec;
a = ctx->attr;
Assuming you cache ctx->attr in a variable \fIa\fP of type ATTR_RECORD * and that
you cache ctx->mrec in a variable \fIm\fP of type MFT_RECORD *.
Note you need to distinguish between the lcn of the returned runlist element
being >= 0 and LCN_HOLE.  In the later case you have to return zeroes on
read and allocate clusters on write.

Return the runlist element containing the \fIvcn\fP on success and
ERR_PTR(-errno) on error.  You need to test the return value with \fBIS_ERR\fP
to decide if the return is success or failure and \fBPTR_ERR\fP to get to the
error code if \fBIS_ERR\fP is true.

The possible error return codes are:
-ENOENT - No such vcn in the runlist, i.e. \fIvcn\fP is out of bounds.
-ENOMEM - Not enough memory to map runlist.
-EIO    - Critical error (runlist/file is corrupt, i/o error, etc).

WARNING: If \fIctx\fP is supplied, regardless of whether success or failure is
returned, you need to check IS_ERR(\fIctx->mrec\fP) and if 'true' the \fIctx\fP
is no longer valid, i.e. you need to either call
\fBntfs_attr_reinit_search_ctx\fP or \fBntfs_attr_put_search_ctx\fP on it.
In that case PTR_ERR(\fIctx->mrec\fP) will give you the error code for
why the mapping of the old inode failed.

Locking: - The runlist described by \fIni\fP must be locked for writing on entry
and is locked on return.  Note the runlist may be modified when
needed runlist fragments need to be mapped.
- If \fIctx\fP is NULL, the base mft record of \fIni\fP must not be mapped on
entry and it will be left unmapped on return.
- If \fIctx\fP is not NULL, the base mft record must be mapped on entry
and it will be left mapped on return.
