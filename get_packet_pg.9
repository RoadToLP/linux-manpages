.TH "get_packet_pg" 9 "get_packet_pg" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
get_packet_pg \- return the next ingress packet buffer from a free list
.SH SYNOPSIS
.B "struct sk_buff *" get_packet_pg
.BI "(struct adapter *adap "  ","
.BI "struct sge_fl *fl "  ","
.BI "struct sge_rspq *q "  ","
.BI "unsigned int len "  ","
.BI "unsigned int drop_thres "  ");"
.SH ARGUMENTS
.IP "adap" 12
the adapter that received the packet
.IP "fl" 12
the SGE free list holding the packet
.IP "q" 12
the queue
.IP "len" 12
the packet length including any SGE padding
.IP "drop_thres" 12
# of remaining buffers before we start dropping packets

Get the next packet from a free list populated with page chunks.
If the packet is small we make a copy and recycle the original buffer,
otherwise we attach the original buffer as a page fragment to a fresh
sk_buff.  If a positive drop threshold is supplied packets are dropped
and their buffers recycled if (a) the number of remaining buffers is
under the threshold and the packet is too big to copy, or (b) there's
no system memory.
.SH "NOTE"
this function is similar to \fIget_packet\fP but deals with Rx buffers
that are page chunks rather than sk_buffs.
