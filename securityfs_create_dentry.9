.TH "securityfs_create_dentry" 9 "securityfs_create_dentry" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
securityfs_create_dentry \- create a dentry in the securityfs filesystem
.SH SYNOPSIS
.B "struct dentry *" securityfs_create_dentry
.BI "(const char *name "  ","
.BI "umode_t mode "  ","
.BI "struct dentry *parent "  ","
.BI "void *data "  ","
.BI "const struct file_operations *fops "  ","
.BI "const struct inode_operations *iops "  ");"
.SH ARGUMENTS
.IP "name" 12
a pointer to a string containing the name of the file to create.
.IP "mode" 12
the permission that the file should have
.IP "parent" 12
a pointer to the parent dentry for this file.  This should be a
directory dentry if set.  If this parameter is NULL, then the
file will be created in the root of the securityfs filesystem.
.IP "data" 12
a pointer to something that the caller will want to get to later
on.  The inode.i_private pointer will point to this value on
the \fBopen\fP call.
.IP "fops" 12
a pointer to a struct file_operations that should be used for
this file.
.IP "iops" 12
a point to a struct of inode_operations that should be used for
this file/dir
.SH "DESCRIPTION"
This is the basic "create a file/dir/symlink" function for
securityfs.  It allows for a wide range of flexibility in creating
a file, or a directory (if you want to create a directory, the
\fBsecurityfs_create_dir\fP function is recommended to be used
instead).

This function returns a pointer to a dentry if it succeeds.  This
pointer must be passed to the \fBsecurityfs_remove\fP function when the
file is to be removed (no automatic cleanup happens if your module
is unloaded, you are responsible here).  If an error occurs, the
function will return the error value (via ERR_PTR).

If securityfs is not enabled in the kernel, the value -ENODEV is
returned.
