.TH "intel_update_watermarks" 9 "intel_update_watermarks" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
intel_update_watermarks \- update FIFO watermark values based on current modes
.SH SYNOPSIS
.B "void" intel_update_watermarks
.BI "(struct intel_crtc *crtc "  ");"
.SH ARGUMENTS
.IP "crtc" 12
the #intel_crtc on which to compute the WM
.SH "DESCRIPTION"
Calculate watermark values for the various WM regs based on current mode
and plane configuration.

There are several cases to deal with here:
- normal (i.e. non-self-refresh)
- self-refresh (SR) mode
- lines are large relative to FIFO size (buffer can hold up to 2)
- lines are small relative to FIFO size (buffer can hold more than 2
lines), so need to account for TLB latency

The normal calculation is:
watermark = dotclock * bytes per pixel * latency
where latency is platform & configuration dependent (we assume pessimal
values here).

The SR calculation is:
watermark = (trunc(latency/line time)+1) * surface width *
bytes per pixel
where
line time = htotal / dotclock
surface width = hdisplay for normal plane and 64 for cursor
and latency is assumed to be high, as above.

The final value programmed to the register should always be rounded up,
and include an extra 2 entries to account for clock crossings.

We don't use the sprite, so we can ignore that.  And on Crestline we have
to set the non-SR watermarks to 8.
