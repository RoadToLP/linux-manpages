.TH "x86_match_cpu" 9 "x86_match_cpu" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
x86_match_cpu \- match current CPU again an array of x86_cpu_ids
.SH SYNOPSIS
.B "const struct x86_cpu_id *" x86_match_cpu
.BI "(const struct x86_cpu_id *match "  ");"
.SH ARGUMENTS
.IP "match" 12
Pointer to array of x86_cpu_ids. Last entry terminated with
{}.
.SH "DESCRIPTION"
Return the entry if the current CPU matches the entries in the
passed x86_cpu_id match table. Otherwise NULL.  The match table
contains vendor (X86_VENDOR_*), family, model and feature bits or
respective wildcard entries.

A typical table entry would be to match a specific CPU

X86_MATCH_VENDOR_FAM_MODEL_FEATURE(INTEL, 6, INTEL_FAM6_BROADWELL,
X86_FEATURE_ANY, NULL);

Fields can be wildcarded with X86_VENDOR_ANY, X86_FAMILY_ANY,
X86_MODEL_ANY, X86_FEATURE_ANY (except for vendor)

asm/cpu_device_id.h contains a set of useful macros which are shortcuts
for various common selections. The above can be shortened to:

X86_MATCH_INTEL_FAM6_MODEL(BROADWELL, NULL);

Arrays used to match for this should also be declared using
MODULE_DEVICE_TABLE(x86cpu, ...)

This always matches against the boot cpu, assuming models and features are
consistent over all CPUs.
