.TH "printk" 9 "printk" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
printk \- print a kernel message
.SH SYNOPSIS
.B "__visible int" printk
.BI "(const char *fmt "  ","
.BI "... "  ");"
.SH ARGUMENTS
.IP "fmt" 12
format string
.IP "..." 12
variable arguments
.SH "DESCRIPTION"
This is \fBprintk\fP. It can be called from any context. We want it to work.

We try to grab the console_lock. If we succeed, it's easy - we log the
output and call the console drivers.  If we fail to get the semaphore, we
place the output into the log buffer and return. The current holder of
the console_sem will notice the new output in \fBconsole_unlock\fP; and will
send it to the consoles before releasing the lock.

One effect of this deferred printing is that code which calls \fBprintk\fP and
then changes console_loglevel may break. This is because console_loglevel
is inspected when the actual printing occurs.

See also:
printf(3)

See the \fBvsnprintf\fP documentation for format string extensions over C99.
