.TH "request_key_and_link" 9 "request_key_and_link" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
request_key_and_link \- Request a key and cache it in a keyring.
.SH SYNOPSIS
.B "struct key *" request_key_and_link
.BI "(struct key_type *type "  ","
.BI "const char *description "  ","
.BI "struct key_tag *domain_tag "  ","
.BI "const void *callout_info "  ","
.BI "size_t callout_len "  ","
.BI "void *aux "  ","
.BI "struct key *dest_keyring "  ","
.BI "unsigned long flags "  ");"
.SH ARGUMENTS
.IP "type" 12
The type of key we want.
.IP "description" 12
The searchable description of the key.
.IP "domain_tag" 12
The domain in which the key operates.
.IP "callout_info" 12
The data to pass to the instantiation upcall (or NULL).
.IP "callout_len" 12
The length of callout_info.
.IP "aux" 12
Auxiliary data for the upcall.
.IP "dest_keyring" 12
Where to cache the key.
.IP "flags" 12
Flags to \fBkey_alloc\fP.
.SH "DESCRIPTION"
A key matching the specified criteria (type, description, domain_tag) is
searched for in the process's keyrings and returned with its usage count
incremented if found.  Otherwise, if callout_info is not NULL, a key will be
allocated and some service (probably in userspace) will be asked to
instantiate it.

If successfully found or created, the key will be linked to the destination
keyring if one is provided.

Returns a pointer to the key if successful; -EACCES, -ENOKEY, -EKEYREVOKED
or -EKEYEXPIRED if an inaccessible, negative, revoked or expired key was
found; -ENOKEY if no key was found and no \fIcallout_info\fP was given; -EDQUOT
if insufficient key quota was available to create a new key; or -ENOMEM if
insufficient memory was available.

If the returned key was created, then it may still be under construction,
and \fBwait_for_key_construction\fP should be used to wait for that to complete.
