.TH "drm_simple_encoder_init" 9 "drm_simple_encoder_init" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
drm_simple_encoder_init \- Initialize a preallocated encoder with basic functionality.
.SH SYNOPSIS
.B "int" drm_simple_encoder_init
.BI "(struct drm_device *dev "  ","
.BI "struct drm_encoder *encoder "  ","
.BI "int encoder_type "  ");"
.SH ARGUMENTS
.IP "dev" 12
drm device
.IP "encoder" 12
the encoder to initialize
.IP "encoder_type" 12
user visible type of the encoder
.SH "DESCRIPTION"
Initialises a preallocated encoder that has no further functionality.
Settings for possible CRTC and clones are left to their initial values.
The encoder will be cleaned up automatically as part of the mode-setting
cleanup.

The caller of \fBdrm_simple_encoder_init\fP is responsible for freeing
the encoder's memory after the encoder has been cleaned up. At the
moment this only works reliably if the encoder data structure is
stored in the device structure. Free the encoder's memory as part of
the device release function.
.SH "NOTE"
consider using \fBdrmm_simple_encoder_alloc\fP instead of
\fBdrm_simple_encoder_init\fP to let the DRM managed resource infrastructure
take care of cleanup and deallocation.
.SH "RETURN"
Zero on success, error code on failure.
