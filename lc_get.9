.TH "lc_get" 9 "lc_get" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
lc_get \- get element by label, maybe change the active set
.SH SYNOPSIS
.B "struct lc_element *" lc_get
.BI "(struct lru_cache *lc "  ","
.BI "unsigned int enr "  ");"
.SH ARGUMENTS
.IP "lc" 12
the lru cache to operate on
.IP "enr" 12
the label to look up
.SH "DESCRIPTION"
Finds an element in the cache, increases its usage count,
"touches" and returns it.

In case the requested number is not present, it needs to be added to the
cache. Therefore it is possible that an other element becomes evicted from
the cache. In either case, the user is notified so he is able to e.g. keep
a persistent log of the cache changes, and therefore the objects in use.

Return values:
NULL
The cache was marked LC_STARVING,
or the requested label was not in the active set
and a changing transaction is still pending (\fIlc\fP was marked LC_DIRTY).
Or no unused or free element could be recycled (\fIlc\fP will be marked as
LC_STARVING, blocking further \fBlc_get\fP operations).

pointer to the element with the REQUESTED element number.
In this case, it can be used right away

pointer to an UNUSED element with some different element number,
where that different number may also be LC_FREE.

In this case, the cache is marked LC_DIRTY,
so \fBlc_try_lock\fP will no longer succeed.
The returned element pointer is moved to the "to_be_changed" list,
and registered with the new element number on the hash collision chains,
so it is possible to pick it up from \fBlc_is_used\fP.
Up to "max_pending_changes" (see \fBlc_create\fP) can be accumulated.
The user now should do whatever housekeeping is necessary,
typically serialize on \fBlc_try_lock_for_transaction\fP, then call
lc_committed(lc) and \fBlc_unlock\fP, to finish the change.
.SH "NOTE"
The user needs to check the lc_number on EACH use, so he recognizes
any cache set change.
