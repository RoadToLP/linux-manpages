.TH "__hwspin_lock_timeout" 9 "__hwspin_lock_timeout" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
__hwspin_lock_timeout \- lock an hwspinlock with timeout limit
.SH SYNOPSIS
.B "int" __hwspin_lock_timeout
.BI "(struct hwspinlock *hwlock "  ","
.BI "unsigned int to "  ","
.BI "int mode "  ","
.BI "unsigned long *flags "  ");"
.SH ARGUMENTS
.IP "hwlock" 12
the hwspinlock to be locked
.IP "to" 12
-- undescribed --
.IP "mode" 12
mode which controls whether local interrupts are disabled or not
.IP "flags" 12
a pointer to where the caller's interrupt state will be saved at (if
requested)
.SH "DESCRIPTION"
This function locks the given \fIhwlock\fP. If the \fIhwlock\fP
is already taken, the function will busy loop waiting for it to
be released, but give up after \fItimeout\fP msecs have elapsed.

Caution: If the mode is HWLOCK_RAW, that means user must protect the routine
of getting hardware lock with mutex or spinlock. Since in some scenarios,
user need some time-consuming or sleepable operations under the hardware
lock, they need one sleepable lock (like mutex) to protect the operations.

If the mode is HWLOCK_IN_ATOMIC (called from an atomic context) the timeout
is handled with busy-waiting delays, hence shall not exceed few msecs.

If the mode is neither HWLOCK_IN_ATOMIC nor HWLOCK_RAW, upon a successful
return from this function, preemption (and possibly interrupts) is disabled,
so the caller must not sleep, and is advised to release the hwspinlock as
soon as possible. This is required in order to minimize remote cores polling
on the hardware interconnect.

The user decides whether local interrupts are disabled or not, and if yes,
whether he wants their previous state to be saved. It is up to the user
to choose the appropriate \fImode\fP of operation, exactly the same way users
should decide between spin_lock, spin_lock_irq and spin_lock_irqsave.

Returns 0 when the \fIhwlock\fP was successfully taken, and an appropriate
error code otherwise (most notably -ETIMEDOUT if the \fIhwlock\fP is still
busy after \fItimeout\fP msecs). The function will never sleep.
