.TH "ice_pkg_enum_entry" 9 "ice_pkg_enum_entry" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
ice_pkg_enum_entry \- 
.SH SYNOPSIS
.B "void *" ice_pkg_enum_entry
.BI "(struct ice_seg *ice_seg "  ","
.BI "struct ice_pkg_enum *state "  ","
.BI "u32 sect_type "  ","
.BI "u32 *offset "  ","
.BI "void *(*handler)(u32 sect_type, void *section, u32 index, u32 *offset) "  ");"
.SH ARGUMENTS
.IP "ice_seg" 12
pointer to the ice segment (or NULL on subsequent calls)
.IP "state" 12
pointer to the enum state
.IP "sect_type" 12
section type to enumerate
.IP "offset" 12
pointer to variable that receives the offset in the table (optional)
.IP "handler" 12
function that handles access to the entries into the section type
.SH "DESCRIPTION"
This function will enumerate all the entries in particular section type in
the ice segment. The first call is made with the ice_seg parameter non-NULL;
on subsequent calls, ice_seg is set to NULL which continues the enumeration.
When the function returns a NULL pointer, then the end of the entries has
been reached.

Since each section may have a different header and entry size, the handler
function is needed to determine the number and location entries in each
section.

The offset parameter is optional, but should be used for sections that
contain an offset for each section table. For such cases, the section handler
function must return the appropriate offset + index to give the absolution
offset for each entry. For example, if the base for a section's header
indicates a base offset of 10, and the index for the entry is 2, then
section handler function should set the offset to 10 + 2 = 12.
