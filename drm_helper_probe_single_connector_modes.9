.TH "drm_helper_probe_single_connector_modes" 9 "drm_helper_probe_single_connector_modes" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
drm_helper_probe_single_connector_modes \- get complete set of display modes
.SH SYNOPSIS
.B "int" drm_helper_probe_single_connector_modes
.BI "(struct drm_connector *connector "  ","
.BI "uint32_t maxX "  ","
.BI "uint32_t maxY "  ");"
.SH ARGUMENTS
.IP "connector" 12
connector to probe
.IP "maxX" 12
max width for modes
.IP "maxY" 12
max height for modes
.SH "DESCRIPTION"
Based on the helper callbacks implemented by \fIconnector\fP in struct
\fIdrm_connector_helper_funcs\fP try to detect all valid modes.  Modes will first
be added to the connector's probed_modes list, then culled (based on validity
and the \fImaxX\fP, \fImaxY\fP parameters) and put into the normal modes list.

Intended to be used as a generic implementation of the
\fIdrm_connector_funcs\fP.\fBfill_modes\fP vfunc for drivers that use the CRTC helpers
for output mode filtering and detection.

The basic procedure is as follows

1. All modes currently on the connector's modes list are marked as stale

2. New modes are added to the connector's probed_modes list with
\fBdrm_mode_probed_add\fP. New modes start their life with status as OK.
Modes are added from a single source using the following priority order.

- \fIdrm_connector_helper_funcs.get_modes\fP vfunc
- if the connector status is connector_status_connected, standard
VESA DMT modes up to 1024x768 are automatically added
(\fBdrm_add_modes_noedid\fP)

Finally modes specified via the kernel command line (video=...) are
added in addition to what the earlier probes produced
(\fBdrm_helper_probe_add_cmdline_mode\fP). These modes are generated
using the VESA GTF/CVT formulas.

3. Modes are moved from the probed_modes list to the modes list. Potential
duplicates are merged together (see \fBdrm_connector_list_update\fP).
After this step the probed_modes list will be empty again.

4. Any non-stale mode on the modes list then undergoes validation

- \fBdrm_mode_validate_basic\fP performs basic sanity checks
- \fBdrm_mode_validate_size\fP filters out modes larger than \fImaxX\fP and \fImaxY\fP
(if specified)
- \fBdrm_mode_validate_flag\fP checks the modes against basic connector
capabilities (interlace_allowed,doublescan_allowed,stereo_allowed)
- the optional \fIdrm_connector_helper_funcs.mode_valid\fP or
\fIdrm_connector_helper_funcs.mode_valid_ctx\fP helpers can perform driver
and/or sink specific checks
- the optional \fIdrm_crtc_helper_funcs.mode_valid\fP,
\fIdrm_bridge_funcs.mode_valid\fP and \fIdrm_encoder_helper_funcs.mode_valid\fP
helpers can perform driver and/or source specific checks which are also
enforced by the modeset/atomic helpers

5. Any mode whose status is not OK is pruned from the connector's modes list,
accompanied by a debug message indicating the reason for the mode's
rejection (see \fBdrm_mode_prune_invalid\fP).
.SH "RETURN"
The number of modes found on \fIconnector\fP.
