.TH "rproc_da_to_va" 9 "rproc_da_to_va" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
rproc_da_to_va \- lookup the kernel virtual address for a remoteproc address
.SH SYNOPSIS
.B "void *" rproc_da_to_va
.BI "(struct rproc *rproc "  ","
.BI "u64 da "  ","
.BI "size_t len "  ");"
.SH ARGUMENTS
.IP "rproc" 12
handle of a remote processor
.IP "da" 12
remoteproc device address to translate
.IP "len" 12
length of the memory region \fIda\fP is pointing to
.SH "DESCRIPTION"
Some remote processors will ask us to allocate them physically contiguous
memory regions (which we call "carveouts"), and map them to specific
device addresses (which are hardcoded in the firmware). They may also have
dedicated memory regions internal to the processors, and use them either
exclusively or alongside carveouts.

They may then ask us to copy objects into specific device addresses (e.g.
code/data sections) or expose us certain symbols in other device address
(e.g. their trace buffer).

This function is a helper function with which we can go over the allocated
carveouts and translate specific device addresses to kernel virtual addresses
so we can access the referenced memory. This function also allows to perform
translations on the internal remoteproc memory regions through a platform
implementation specific da_to_va ops, if present.

The function returns a valid kernel address on success or NULL on failure.
.SH "NOTE"
phys_to_virt(iommu_iova_to_phys(rproc->domain, da)) will work too,
but only on kernel direct mapped RAM memory. Instead, we're just using
here the output of the DMA API for the carveouts, which should be more
correct.
