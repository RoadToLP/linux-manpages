.TH "bstr_printf" 9 "bstr_printf" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
bstr_printf \- Format a string from binary arguments and place it in a buffer
.SH SYNOPSIS
.B "int" bstr_printf
.BI "(char *buf "  ","
.BI "size_t size "  ","
.BI "const char *fmt "  ","
.BI "const u32 *bin_buf "  ");"
.SH ARGUMENTS
.IP "buf" 12
The buffer to place the result into
.IP "size" 12
The size of the buffer, including the trailing null space
.IP "fmt" 12
The format string to use
.IP "bin_buf" 12
Binary arguments for the format string
.SH "DESCRIPTION"
This function like C99 vsnprintf, but the difference is that vsnprintf gets
arguments from stack, and bstr_printf gets arguments from \fIbin_buf\fP which is
a binary buffer that generated by vbin_printf.

The format follows C99 vsnprintf, but has some extensions:
see vsnprintf comment for details.

The return value is the number of characters which would
be generated for the given input, excluding the trailing
'\0', as per ISO C99. If you want to have the exact
number of characters written into \fIbuf\fP as return value
(not including the trailing '\0'), use \fBvscnprintf\fP. If the
return is greater than or equal to \fIsize\fP, the resulting
string is truncated.
