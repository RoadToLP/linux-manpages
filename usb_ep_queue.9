.TH "usb_ep_queue" 9 "usb_ep_queue" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
usb_ep_queue \- queues (submits) an I/O request to an endpoint.
.SH SYNOPSIS
.B "int" usb_ep_queue
.BI "(struct usb_ep *ep "  ","
.BI "struct usb_request *req "  ","
.BI "gfp_t gfp_flags "  ");"
.SH ARGUMENTS
.IP "ep" 12
the endpoint associated with the request
.IP "req" 12
the request being submitted
.IP "gfp_flags" 12
GFP_* flags to use in case the lower level driver couldn't
pre-allocate all necessary memory with the request.
.SH "DESCRIPTION"
This tells the device controller to perform the specified request through
that endpoint (reading or writing a buffer).  When the request completes,
including being canceled by \fBusb_ep_dequeue\fP, the request's completion
routine is called to return the request to the driver.  Any endpoint
(except control endpoints like ep0) may have more than one transfer
request queued; they complete in FIFO order.  Once a gadget driver
submits a request, that request may not be examined or modified until it
is given back to that driver through the completion callback.

Each request is turned into one or more packets.  The controller driver
never merges adjacent requests into the same packet.  OUT transfers
will sometimes use data that's already buffered in the hardware.
Drivers can rely on the fact that the first byte of the request's buffer
always corresponds to the first byte of some USB packet, for both
IN and OUT transfers.

Bulk endpoints can queue any amount of data; the transfer is packetized
automatically.  The last packet will be short if the request doesn't fill it
out completely.  Zero length packets (ZLPs) should be avoided in portable
protocols since not all usb hardware can successfully handle zero length
packets.  (ZLPs may be explicitly written, and may be implicitly written if
the request 'zero' flag is set.)  Bulk endpoints may also be used
for interrupt transfers; but the reverse is not true, and some endpoints
won't support every interrupt transfer.  (Such as 768 byte packets.)

Interrupt-only endpoints are less functional than bulk endpoints, for
example by not supporting queueing or not handling buffers that are
larger than the endpoint's maxpacket size.  They may also treat data
toggle differently.

Control endpoints ... after getting a \fBsetup\fP callback, the driver queues
one response (even if it would be zero length).  That enables the
status ack, after transferring data as specified in the response.  Setup
functions may return negative error codes to generate protocol stalls.
(Note that some USB device controllers disallow protocol stall responses
in some cases.)  When control responses are deferred (the response is
written after the setup callback returns), then \fBusb_ep_set_halt\fP may be
used on ep0 to trigger protocol stalls.  Depending on the controller,
it may not be possible to trigger a status-stage protocol stall when the
data stage is over, that is, from within the response's completion
routine.

For periodic endpoints, like interrupt or isochronous ones, the usb host
arranges to poll once per interval, and the gadget driver usually will
have queued some data to transfer at that time.

Note that \fIreq\fP's ->\fBcomplete\fP callback must never be called from
within \fBusb_ep_queue\fP as that can create deadlock situations.

This routine may be called in interrupt context.

Returns zero, or a negative error code.  Endpoints that are not enabled
report errors; errors will also be
reported when the usb peripheral is disconnected.

If and only if \fIreq\fP is successfully queued (the return value is zero),
\fIreq\fP->\fBcomplete\fP will be called exactly once, when the Gadget core and
UDC are finished with the request.  When the completion function is called,
control of the request is returned to the device driver which submitted it.
The completion handler may then immediately free or reuse \fIreq\fP.
