.TH "usb_driver_release_interface" 9 "usb_driver_release_interface" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
usb_driver_release_interface \- unbind a driver from an interface
.SH SYNOPSIS
.B "void" usb_driver_release_interface
.BI "(struct usb_driver *driver "  ","
.BI "struct usb_interface *iface "  ");"
.SH ARGUMENTS
.IP "driver" 12
the driver to be unbound
.IP "iface" 12
the interface from which it will be unbound
.SH "DESCRIPTION"
This can be used by drivers to release an interface without waiting
for their \fBdisconnect\fP methods to be called.  In typical cases this
also causes the driver \fBdisconnect\fP method to be called.

This call is synchronous, and may not be used in an interrupt context.
Callers must own the device lock, so driver \fBdisconnect\fP entries don't
need extra locking, but other call contexts may need to explicitly claim
that lock.
