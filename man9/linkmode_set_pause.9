.TH "linkmode_set_pause" 9 "linkmode_set_pause" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
linkmode_set_pause \- set the pause mode advertisement
.SH SYNOPSIS
.B "void" linkmode_set_pause
.BI "(unsigned long *advertisement "  ","
.BI "bool tx "  ","
.BI "bool rx "  ");"
.SH ARGUMENTS
.IP "advertisement" 12
advertisement in ethtool format
.IP "tx" 12
boolean from ethtool struct ethtool_pauseparam tx_pause member
.IP "rx" 12
boolean from ethtool struct ethtool_pauseparam rx_pause member
.SH "DESCRIPTION"
Configure the advertised Pause and Asym_Pause bits according to the
capabilities of provided in \fItx\fP and \fIrx\fP.

We convert as follows:
tx rx  Pause AsymDir
0  0   0     0
0  1   1     1
1  0   0     1
1  1   1     0

For tx=0 rx=1, meaning transmit is unsupported, receive is supported:

Local device  Link partner
Pause AsymDir Pause AsymDir Result
1     1       1     0     TX + RX - but we have no TX support.
1     1       0     1     Only this gives RX only

For tx=1 rx=1, meaning we have the capability to transmit and receive
pause frames:

Local device  Link partner
Pause AsymDir Pause AsymDir Result
1     0       0     1     Disabled - but since we do support tx and rx,
this should resolve to RX only.

Hence, asking for:
rx=1 tx=0 gives Pause+AsymDir advertisement, but we may end up
resolving to tx+rx pause or only rx pause depending on
the partners advertisement.
rx=0 tx=1 gives AsymDir only, which will only give tx pause if
the partners advertisement allows it.
rx=1 tx=1 gives Pause only, which will only allow tx+rx pause
if the other end also advertises Pause.
.SH "NOTE"
this translation from ethtool tx/rx notation to the advertisement
is actually very problematical. Here are some examples:
