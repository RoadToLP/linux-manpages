.TH "ubi_leb_read" 9 "ubi_leb_read" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
ubi_leb_read \- read data.
.SH SYNOPSIS
.B "int" ubi_leb_read
.BI "(struct ubi_volume_desc *desc "  ","
.BI "int lnum "  ","
.BI "char *buf "  ","
.BI "int offset "  ","
.BI "int len "  ","
.BI "int check "  ");"
.SH ARGUMENTS
.IP "desc" 12
volume descriptor
.IP "lnum" 12
logical eraseblock number to read from
.IP "buf" 12
buffer where to store the read data
.IP "offset" 12
offset within the logical eraseblock to read from
.IP "len" 12
how many bytes to read
.IP "check" 12
whether UBI has to check the read data's CRC or not.
.SH "DESCRIPTION"
This function reads data from offset \fIoffset\fP of logical eraseblock \fIlnum\fP and
stores the data at \fIbuf\fP. When reading from static volumes, \fIcheck\fP specifies
whether the data has to be checked or not. If yes, the whole logical
eraseblock will be read and its CRC checksum will be checked (i.e., the CRC
checksum is per-eraseblock). So checking may substantially slow down the
read speed. The \fIcheck\fP argument is ignored for dynamic volumes.

In case of success, this function returns zero. In case of failure, this
function returns a negative error code.

-EBADMSG error code is returned:
o for both static and dynamic volumes if MTD driver has detected a data
integrity problem (unrecoverable ECC checksum mismatch in case of NAND);
o for static volumes in case of data CRC mismatch.

If the volume is damaged because of an interrupted update this function just
returns immediately with -EBADF error code.
