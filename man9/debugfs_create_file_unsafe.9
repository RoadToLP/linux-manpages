.TH "debugfs_create_file_unsafe" 9 "debugfs_create_file_unsafe" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
debugfs_create_file_unsafe \- create a file in the debugfs filesystem
.SH SYNOPSIS
.B "struct dentry *" debugfs_create_file_unsafe
.BI "(const char *name "  ","
.BI "umode_t mode "  ","
.BI "struct dentry *parent "  ","
.BI "void *data "  ","
.BI "const struct file_operations *fops "  ");"
.SH ARGUMENTS
.IP "name" 12
a pointer to a string containing the name of the file to create.
.IP "mode" 12
the permission that the file should have.
.IP "parent" 12
a pointer to the parent dentry for this file.  This should be a
directory dentry if set.  If this parameter is NULL, then the
file will be created in the root of the debugfs filesystem.
.IP "data" 12
a pointer to something that the caller will want to get to later
on.  The inode.i_private pointer will point to this value on
the \fBopen\fP call.
.IP "fops" 12
a pointer to a struct file_operations that should be used for
this file.
.SH "DESCRIPTION"
\fBdebugfs_create_file_unsafe\fP is completely analogous to
\fBdebugfs_create_file\fP, the only difference being that the fops
handed it will not get protected against file removals by the
debugfs core.

It is your responsibility to protect your struct file_operation
methods against file removals by means of \fBdebugfs_file_get\fP
and \fBdebugfs_file_put\fP. ->\fBopen\fP is still protected by
debugfs though.

Any struct file_operations defined by means of
\fBDEFINE_DEBUGFS_ATTRIBUTE\fP is protected against file removals and
thus, may be used here.
