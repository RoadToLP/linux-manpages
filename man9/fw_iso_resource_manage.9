.TH "fw_iso_resource_manage" 9 "fw_iso_resource_manage" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
fw_iso_resource_manage \- Allocate or deallocate a channel and/or bandwidth
.SH SYNOPSIS
.B "void" fw_iso_resource_manage
.BI "(struct fw_card *card "  ","
.BI "int generation "  ","
.BI "u64 channels_mask "  ","
.BI "int *channel "  ","
.BI "int *bandwidth "  ","
.BI "bool allocate "  ");"
.SH ARGUMENTS
.IP "card" 12
card interface for this action
.IP "generation" 12
bus generation
.IP "channels_mask" 12
bitmask for channel allocation
.IP "channel" 12
pointer for returning channel allocation result
.IP "bandwidth" 12
pointer for returning bandwidth allocation result
.IP "allocate" 12
whether to allocate (true) or deallocate (false)
.SH "DESCRIPTION"
In parameters: card, generation, channels_mask, bandwidth, allocate
Out parameters: channel, bandwidth

This function blocks (sleeps) during communication with the IRM.

Allocates or deallocates at most one channel out of channels_mask.
channels_mask is a bitfield with MSB for channel 63 and LSB for channel 0.
(Note, the IRM's CHANNELS_AVAILABLE is a big-endian bitfield with MSB for
channel 0 and LSB for channel 63.)
Allocates or deallocates as many bandwidth allocation units as specified.

Returns channel < 0 if no channel was allocated or deallocated.
Returns bandwidth = 0 if no bandwidth was allocated or deallocated.

If generation is stale, deallocations succeed but allocations fail with
channel = -EAGAIN.

If channel allocation fails, no bandwidth will be allocated either.
If bandwidth allocation fails, no channel will be allocated either.
But deallocations of channel and bandwidth are tried independently
of each other's success.
