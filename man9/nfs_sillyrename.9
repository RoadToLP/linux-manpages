.TH "nfs_sillyrename" 9 "nfs_sillyrename" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
nfs_sillyrename \- Perform a silly-rename of a dentry
.SH SYNOPSIS
.B "int" nfs_sillyrename
.BI "(struct inode *dir "  ","
.BI "struct dentry *dentry "  ");"
.SH ARGUMENTS
.IP "dir" 12
inode of directory that contains dentry
.IP "dentry" 12
dentry to be sillyrenamed
.SH "DESCRIPTION"
NFSv2/3 is stateless and the server doesn't know when the client is
holding a file open. To prevent application problems when a file is
unlinked while it's still open, the client performs a "silly-rename".
That is, it renames the file to a hidden file in the same directory,
and only performs the unlink once the last reference to it is put.

The final cleanup is done during dentry_iput.

(Note: NFSv4 is stateful, and has opens, so in theory an NFSv4 server
could take responsibility for keeping open files referenced.  The server
would also need to ensure that opened-but-deleted files were kept over
reboots.  However, we may not assume a server does so.  (RFC 5661
does provide an OPEN4_RESULT_PRESERVE_UNLINKED flag that a server can
use to advertise that it does this; some day we may take advantage of
it.))
