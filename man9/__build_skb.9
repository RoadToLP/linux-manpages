.TH "__build_skb" 9 "__build_skb" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
__build_skb \- build a network buffer
.SH SYNOPSIS
.B "struct sk_buff *" __build_skb
.BI "(void *data "  ","
.BI "unsigned int frag_size "  ");"
.SH ARGUMENTS
.IP "data" 12
data buffer provided by caller
.IP "frag_size" 12
size of data, or 0 if head was kmalloced
.SH "DESCRIPTION"
Allocate a new \fIsk_buff\fP. Caller provides space holding head and
skb_shared_info. \fIdata\fP must have been allocated by \fBkmalloc\fP only if
\fIfrag_size\fP is 0, otherwise data should come from the page allocator
or \fBvmalloc\fP
The return is the new skb buffer.
On a failure the return is NULL, and \fIdata\fP is not freed.
.SH "NOTES"
Before IO, driver allocates only data buffer where NIC put incoming frame
Driver should add room at head (NET_SKB_PAD) and
MUST add room at tail (SKB_DATA_ALIGN(skb_shared_info))
After IO, driver calls \fBbuild_skb\fP, to allocate sk_buff and populate it
before giving packet to stack.
RX rings only contains data buffers, not full skbs.
