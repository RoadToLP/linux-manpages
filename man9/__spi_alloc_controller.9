.TH "__spi_alloc_controller" 9 "__spi_alloc_controller" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
__spi_alloc_controller \- allocate an SPI master or slave controller
.SH SYNOPSIS
.B "struct spi_controller *" __spi_alloc_controller
.BI "(struct device *dev "  ","
.BI "unsigned int size "  ","
.BI "bool slave "  ");"
.SH ARGUMENTS
.IP "dev" 12
the controller, possibly using the platform_bus
.IP "size" 12
how much zeroed driver-private data to allocate; the pointer to this
memory is in the driver_data field of the returned device, accessible
with \fBspi_controller_get_devdata\fP; the memory is cacheline aligned;
drivers granting DMA access to portions of their private data need to
round up \fIsize\fP using ALIGN(size, \fBdma_get_cache_alignment\fP).
.IP "slave" 12
flag indicating whether to allocate an SPI master (false) or SPI
slave (true) controller
.SH "CONTEXT"
can sleep
.SH "DESCRIPTION"
This call is used only by SPI controller drivers, which are the
only ones directly touching chip registers.  It's how they allocate
an spi_controller structure, prior to calling \fBspi_register_controller\fP.

This must be called from context that can sleep.

The caller is responsible for assigning the bus number and initializing the
controller's methods before calling \fBspi_register_controller\fP; and (after
errors adding the device) calling \fBspi_controller_put\fP to prevent a memory
leak.
.SH "RETURN"
the SPI controller structure on success, else NULL.
