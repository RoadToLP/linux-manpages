.TH "rpm_suspend" 9 "rpm_suspend" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
rpm_suspend \- Carry out runtime suspend of given device.
.SH SYNOPSIS
.B "int" rpm_suspend
.BI "(struct device *dev "  ","
.BI "int rpmflags "  ");"
.SH ARGUMENTS
.IP "dev" 12
Device to suspend.
.IP "rpmflags" 12
Flag bits.
.SH "DESCRIPTION"
Check if the device's runtime PM status allows it to be suspended.
Cancel a pending idle notification, autosuspend or suspend. If
another suspend has been started earlier, either return immediately
or wait for it to finish, depending on the RPM_NOWAIT and RPM_ASYNC
flags. If the RPM_ASYNC flag is set then queue a suspend request;
otherwise run the ->\fBruntime_suspend\fP callback directly. When
->runtime_suspend succeeded, if a deferred resume was requested while
the callback was running then carry it out, otherwise send an idle
notification for its parent (if the suspend succeeded and both
ignore_children of parent->power and irq_safe of dev->power are not set).
If ->runtime_suspend failed with -EAGAIN or -EBUSY, and if the RPM_AUTO
flag is set and the next autosuspend-delay expiration time is in the
future, schedule another autosuspend attempt.

This function must be called under dev->power.lock with interrupts disabled.
