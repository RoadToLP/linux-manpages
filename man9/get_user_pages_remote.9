.TH "get_user_pages_remote" 9 "get_user_pages_remote" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
get_user_pages_remote \- pin user pages in memory
.SH SYNOPSIS
.B "long" get_user_pages_remote
.BI "(struct mm_struct *mm "  ","
.BI "unsigned long start "  ","
.BI "unsigned long nr_pages "  ","
.BI "unsigned int gup_flags "  ","
.BI "struct page **pages "  ","
.BI "struct vm_area_struct **vmas "  ","
.BI "int *locked "  ");"
.SH ARGUMENTS
.IP "mm" 12
mm_struct of target mm
.IP "start" 12
starting user address
.IP "nr_pages" 12
number of pages from start to pin
.IP "gup_flags" 12
flags modifying lookup behaviour
.IP "pages" 12
array that receives pointers to the pages pinned.
Should be at least nr_pages long. Or NULL, if caller
only intends to ensure the pages are faulted in.
.IP "vmas" 12
array of pointers to vmas corresponding to each page.
Or NULL if the caller does not require them.
.IP "locked" 12
pointer to lock flag indicating whether lock is held and
subsequently whether VM_FAULT_RETRY functionality can be
utilised. Lock must initially be held.
.SH "DESCRIPTION"
Returns either number of pages pinned (which may be less than the
number requested), or an error. Details about the return value:

-- If nr_pages is 0, returns 0.
-- If nr_pages is >0, but no pages were pinned, returns -errno.
-- If nr_pages is >0, and some pages were pinned, returns the number of
pages pinned. Again, this may be less than nr_pages.

The caller is responsible for releasing returned \fIpages\fP, via \fBput_page\fP.

\fIvmas\fP are valid only as long as mmap_lock is held.

Must be called with mmap_lock held for read or write.

get_user_pages_remote walks a process's page tables and takes a reference
to each struct page that each user address corresponds to at a given
instant. That is, it takes the page that would be accessed if a user
thread accesses the given user virtual address at that instant.

This does not guarantee that the page exists in the user mappings when
get_user_pages_remote returns, and there may even be a completely different
page there in some cases (eg. if mmapped pagecache has been invalidated
and subsequently re faulted). However it does guarantee that the page
won't be freed completely. And mostly callers simply care that the page
contains data that was valid *at some point in time*. Typically, an IO
or similar operation cannot guarantee anything stronger anyway because
locks can't be held over the syscall boundary.

If gup_flags & FOLL_WRITE == 0, the page must not be written to. If the page
is written to, set_page_dirty (or set_page_dirty_lock, as appropriate) must
be called after the page is finished with, and before put_page is called.

get_user_pages_remote is typically used for fewer-copy IO operations,
to get a handle on the memory by some means other than accesses
via the user virtual addresses. The pages may be submitted for
DMA to devices or accessed via their kernel linear mapping (via the
kmap APIs). Care should be taken to use the correct cache flushing APIs.

See also get_user_pages_fast, for performance critical applications.

get_user_pages_remote should be phased out in favor of
get_user_pages_locked|unlocked or get_user_pages_fast. Nothing
should use get_user_pages_remote because it cannot pass
FAULT_FLAG_ALLOW_RETRY to handle_mm_fault.
