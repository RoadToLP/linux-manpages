.TH "usb_alloc_coherent" 9 "usb_alloc_coherent" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
usb_alloc_coherent \- allocate dma-consistent buffer for URB_NO_xxx_DMA_MAP
.SH SYNOPSIS
.B "void *" usb_alloc_coherent
.BI "(struct usb_device *dev "  ","
.BI "size_t size "  ","
.BI "gfp_t mem_flags "  ","
.BI "dma_addr_t *dma "  ");"
.SH ARGUMENTS
.IP "dev" 12
device the buffer will be used with
.IP "size" 12
requested buffer size
.IP "mem_flags" 12
affect whether allocation may block
.IP "dma" 12
used to return DMA address of buffer
.SH "RETURN"
Either null (indicating no buffer could be allocated), or the
cpu-space pointer to a buffer that may be used to perform DMA to the
specified device.  Such cpu-space buffers are returned along with the DMA
address (through the pointer provided).
.SH "NOTE"
These buffers are used with URB_NO_xxx_DMA_MAP set in urb->transfer_flags
to avoid behaviors like using "DMA bounce buffers", or thrashing IOMMU
hardware during URB completion/resubmit.  The implementation varies between
platforms, depending on details of how DMA will work to this device.
Using these buffers also eliminates cacheline sharing problems on
architectures where CPU caches are not DMA-coherent.  On systems without
bus-snooping caches, these buffers are uncached.
.SH "DESCRIPTION"
When the buffer is no longer used, free it with \fBusb_free_coherent\fP.
