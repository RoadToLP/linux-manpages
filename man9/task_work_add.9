.TH "task_work_add" 9 "task_work_add" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
task_work_add \- ask the @task to execute @work->func()
.SH SYNOPSIS
.B "int" task_work_add
.BI "(struct task_struct *task "  ","
.BI "struct callback_head *work "  ","
.BI "enum task_work_notify_mode notify "  ");"
.SH ARGUMENTS
.IP "task" 12
the task which should run the callback
.IP "work" 12
the callback to run
.IP "notify" 12
how to notify the targeted task
.SH "DESCRIPTION"
Queue \fIwork\fP for \fBtask_work_run\fP below and notify the \fItask\fP if \fInotify\fP
is \fITWA_RESUME\fP or \fITWA_SIGNAL\fP. \fITWA_SIGNAL\fP works like signals, in that the
it will interrupt the targeted task and run the task_work. \fITWA_RESUME\fP
work is run only when the task exits the kernel and returns to user mode,
or before entering guest mode. Fails if the \fItask\fP is exiting/exited and thus
it can't process this \fIwork\fP. Otherwise \fIwork\fP->\fBfunc\fP will be called when the
\fItask\fP goes through one of the aforementioned transitions, or exits.

If the targeted task is exiting, then an error is returned and the work item
is not queued. It's up to the caller to arrange for an alternative mechanism
in that case.
.SH "NOTE"
there is no ordering guarantee on works queued here. The task_work
list is LIFO.
.SH "RETURN"
0 if succeeds or -ESRCH.
