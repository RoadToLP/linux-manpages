.TH "cpu_util" 9 "cpu_util" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
cpu_util \- Estimates the amount of capacity of a CPU used by CFS tasks.
.SH SYNOPSIS
.B "unsigned long" cpu_util
.BI "(int cpu "  ");"
.SH ARGUMENTS
.IP "cpu" 12
the CPU to get the utilization of
.SH "DESCRIPTION"
The unit of the return value must be the one of capacity so we can compare
the utilization with the capacity of the CPU that is available for CFS task
(ie cpu_capacity).

cfs_rq.avg.util_avg is the sum of running time of runnable tasks plus the
recent utilization of currently non-runnable tasks on a CPU. It represents
the amount of utilization of a CPU in the range [0..capacity_orig] where
capacity_orig is the cpu_capacity available at the highest frequency
(\fBarch_scale_freq_capacity\fP).
The utilization of a CPU converges towards a sum equal to or less than the
current capacity (capacity_curr <= capacity_orig) of the CPU because it is
the running time on this CPU scaled by capacity_curr.

The estimated utilization of a CPU is defined to be the maximum between its
cfs_rq.avg.util_avg and the sum of the estimated utilization of the tasks
currently RUNNABLE on that CPU.
This allows to properly represent the expected utilization of a CPU which
has just got a big task running since a long sleep period. At the same time
however it preserves the benefits of the "blocked utilization" in
describing the potential for other tasks waking up on the same CPU.

Nevertheless, cfs_rq.avg.util_avg can be higher than capacity_curr or even
higher than capacity_orig because of unfortunate rounding in
cfs.avg.util_avg or just after migrating tasks and new task wakeups until
the average stabilizes with the new running time. We need to check that the
utilization stays within the range of [0..capacity_orig] and cap it if
necessary. Without utilization capping, a group could be seen as overloaded
(CPU0 utilization at 121% + CPU1 utilization at 80%) whereas CPU1 has 20% of
available capacity. We allow utilization to overshoot capacity_curr (but not
capacity_orig) as it useful for predicting the capacity required after task
migrations (scheduler-driven DVFS).
.SH "RETURN"
the (estimated) utilization for the specified CPU
