.TH "cp_prefetch" 9 "cp_prefetch" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
cp_prefetch \- translate a guest physical address channel program to a real-device runnable channel program.
.SH SYNOPSIS
.B "int" cp_prefetch
.BI "(struct channel_program *cp "  ");"
.SH ARGUMENTS
.IP "cp" 12
channel_program on which to perform the operation
.SH "DESCRIPTION"
This function translates the guest-physical-address channel program
and stores the result to ccwchain list. \fIcp\fP must have been
initialized by a previous call with \fBcp_init\fP. Otherwise, undefined
behavior occurs.
For each chain composing the channel program:
- On entry ch_len holds the count of CCWs to be translated.
- On exit ch_len is adjusted to the count of successfully translated CCWs.
This allows cp_free to find in ch_len the count of CCWs to free in a chain.

The S/390 CCW Translation APIS (prefixed by 'cp_') are introduced
as helpers to do ccw chain translation inside the kernel. Basically
they accept a channel program issued by a virtual machine, and
translate the channel program to a real-device runnable channel
program.

These APIs will copy the ccws into kernel-space buffers, and update
the guest phsical addresses with their corresponding host physical
addresses.  Then channel I/O device drivers could issue the
translated channel program to real devices to perform an I/O
operation.

These interfaces are designed to support translation only for
channel programs, which are generated and formatted by a
guest. Thus this will make it possible for things like VFIO to
leverage the interfaces to passthrough a channel I/O mediated
device in QEMU.

We support direct ccw chaining by translating them to idal ccws.
.SH "RETURN"
0 on success and a negative error value on failure.
