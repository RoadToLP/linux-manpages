.TH "i915_gem_evict_something" 9 "i915_gem_evict_something" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
i915_gem_evict_something \- Evict vmas to make room for binding a new one
.SH SYNOPSIS
.B "int" i915_gem_evict_something
.BI "(struct i915_address_space *vm "  ","
.BI "u64 min_size "  ","
.BI "u64 alignment "  ","
.BI "unsigned long color "  ","
.BI "u64 start "  ","
.BI "u64 end "  ","
.BI "unsigned flags "  ");"
.SH ARGUMENTS
.IP "vm" 12
address space to evict from
.IP "min_size" 12
size of the desired free space
.IP "alignment" 12
alignment constraint of the desired free space
.IP "color" 12
color for the desired space
.IP "start" 12
start (inclusive) of the range from which to evict objects
.IP "end" 12
end (exclusive) of the range from which to evict objects
.IP "flags" 12
additional flags to control the eviction algorithm
.SH "DESCRIPTION"
This function will try to evict vmas until a free space satisfying the
requirements is found. Callers must check first whether any such hole exists
already before calling this function.

This function is used by the object/vma binding code.

Since this function is only used to free up virtual address space it only
ignores pinned vmas, and not object where the backing storage itself is
pinned. Hence obj->pages_pin_count does not protect against eviction.

To clarify: This is for freeing up virtual address space, not for freeing
memory in e.g. the shrinker.
