.TH "_reset" 9 "_reset" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
_reset \- reset an omap_hwmod
.SH SYNOPSIS
.B "int" _reset
.BI "(struct omap_hwmod *oh "  ");"
.SH ARGUMENTS
.IP "oh" 12
struct omap_hwmod *
.SH "DESCRIPTION"
Resets an omap_hwmod \fIoh\fP.  If the module has a custom reset
function pointer defined, then call it to reset the IP block, and
pass along its return value to the caller.  Otherwise, if the IP
block has an OCP_SYSCONFIG register with a SOFTRESET bitfield
associated with it, call a function to reset the IP block via that
method, and pass along the return value to the caller.  Finally, if
the IP block has some hardreset lines associated with it, assert
all of those, but do _not_ deassert them. (This is because driver
authors have expressed an apparent requirement to control the
deassertion of the hardreset lines themselves.)

The default software reset mechanism for most OMAP IP blocks is
triggered via the OCP_SYSCONFIG.SOFTRESET bit.  However, some
hwmods cannot be reset via this method.  Some are not targets and
therefore have no OCP header registers to access.  Others (like the
IVA) have idiosyncratic reset sequences.  So for these relatively
rare cases, custom reset code can be supplied in the struct
omap_hwmod_class .reset function pointer.

\fB_set_dmadisable\fP is called to set the DMADISABLE bit so that it
does not prevent idling of the system. This is necessary for cases
where ROMCODE/BOOTLOADER uses dma and transfers control to the
kernel without disabling dma.

Passes along the return value from either \fB_ocp_softreset\fP or the
custom reset function - these must return -EINVAL if the hwmod
cannot be reset this way or if the hwmod is in the wrong state,
-ETIMEDOUT if the module did not reset in time, or 0 upon success.
