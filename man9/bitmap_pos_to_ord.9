.TH "bitmap_pos_to_ord" 9 "bitmap_pos_to_ord" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
bitmap_pos_to_ord \- find ordinal of set bit at given position in bitmap
.SH SYNOPSIS
.B "int" bitmap_pos_to_ord
.BI "(const unsigned long *buf "  ","
.BI "unsigned int pos "  ","
.BI "unsigned int nbits "  ");"
.SH ARGUMENTS
.IP "buf" 12
pointer to a bitmap
.IP "pos" 12
a bit position in \fIbuf\fP (0 <= \fIpos\fP < \fInbits\fP)
.IP "nbits" 12
number of valid bit positions in \fIbuf\fP
.SH "DESCRIPTION"
Map the bit at position \fIpos\fP in \fIbuf\fP (of length \fInbits\fP) to the
ordinal of which set bit it is.  If it is not set or if \fIpos\fP
is not a valid bit position, map to -1.

If for example, just bits 4 through 7 are set in \fIbuf\fP, then \fIpos\fP
values 4 through 7 will get mapped to 0 through 3, respectively,
and other \fIpos\fP values will get mapped to -1.  When \fIpos\fP value 7
gets mapped to (returns) \fIord\fP value 3 in this example, that means
that bit 7 is the 3rd (starting with 0th) set bit in \fIbuf\fP.

The bit positions 0 through \fIbits\fP are valid positions in \fIbuf\fP.
