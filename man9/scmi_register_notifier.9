.TH "scmi_register_notifier" 9 "scmi_register_notifier" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
scmi_register_notifier \- Register a notifier_block for an event
.SH SYNOPSIS
.B "int" scmi_register_notifier
.BI "(const struct scmi_handle *handle "  ","
.BI "u8 proto_id "  ","
.BI "u8 evt_id "  ","
.BI "u32 *src_id "  ","
.BI "struct notifier_block *nb "  ");"
.SH ARGUMENTS
.IP "handle" 12
The handle identifying the platform instance against which the
callback is registered
.IP "proto_id" 12
Protocol ID
.IP "evt_id" 12
Event ID
.IP "src_id" 12
Source ID, when NULL register for events coming form ALL possible
sources
.IP "nb" 12
A standard notifier block to register for the specified event
.SH "DESCRIPTION"
Generic helper to register a notifier_block against a protocol event.

A notifier_block \fInb\fP will be registered for each distinct event identified
by the tuple (proto_id, evt_id, src_id) on a dedicated notification chain
so that:

(proto_X, evt_Y, src_Z) --> chain_X_Y_Z

\fIsrc_id\fP meaning is protocol specific and identifies the origin of the event
(like domain_id, sensor_id and so forth).

\fIsrc_id\fP can be NULL to signify that the caller is interested in receiving
notifications from ALL the available sources for that protocol OR simply that
the protocol does not support distinct sources.

As soon as one user for the specified tuple appears, an handler is created,
and that specific event's generation is enabled at the platform level, unless
an associated registered event is found missing, meaning that the needed
protocol is still to be initialized and the handler has just been registered
as still pending.
.SH "RETURN"
0 on Success
