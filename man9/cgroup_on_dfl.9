.TH "cgroup_on_dfl" 9 "cgroup_on_dfl" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
cgroup_on_dfl \- test whether a cgroup is on the default hierarchy
.SH SYNOPSIS
.B "bool" cgroup_on_dfl
.BI "(const struct cgroup *cgrp "  ");"
.SH ARGUMENTS
.IP "cgrp" 12
the cgroup of interest
.SH "DESCRIPTION"
The default hierarchy is the v2 interface of cgroup and this function
can be used to test whether a cgroup is on the default hierarchy for
cases where a subsystem should behave differently depending on the
interface version.

List of changed behaviors:

- Mount options "noprefix", "xattr", "clone_children", "release_agent"
and "name" are disallowed.

- When mounting an existing superblock, mount options should match.

- Remount is disallowed.

- rename(2) is disallowed.

- "tasks" is removed.  Everything should be at process granularity.  Use
"cgroup.procs" instead.

- "cgroup.procs" is not sorted.  pids will be unique unless they got
recycled in-between reads.

- "release_agent" and "notify_on_release" are removed.  Replacement
notification mechanism will be implemented.

- "cgroup.clone_children" is removed.

- "cgroup.subtree_populated" is available.  Its value is 0 if the cgroup
and its descendants contain no task; otherwise, 1.  The file also
generates kernfs notification which can be monitored through poll and
[di]notify when the value of the file changes.

- cpuset: tasks will be kept in empty cpusets when hotplug happens and
take masks of ancestors with non-empty cpus/mems, instead of being
moved to an ancestor.

- cpuset: a task can be moved into an empty cpuset, and again it takes
masks of ancestors.

- blkcg: blk-throttle becomes properly hierarchical.

- debug: disallowed on the default hierarchy.
