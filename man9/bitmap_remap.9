.TH "bitmap_remap" 9 "bitmap_remap" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
bitmap_remap \- Apply map defined by a pair of bitmaps to another bitmap
.SH SYNOPSIS
.B "void" bitmap_remap
.BI "(unsigned long *dst "  ","
.BI "const unsigned long *src "  ","
.BI "const unsigned long *old "  ","
.BI "const unsigned long *new "  ","
.BI "unsigned int nbits "  ");"
.SH ARGUMENTS
.IP "dst" 12
remapped result
.IP "src" 12
subset to be remapped
.IP "old" 12
defines domain of map
.IP "new" 12
defines range of map
.IP "nbits" 12
number of bits in each of these bitmaps
.SH "DESCRIPTION"
Let \fIold\fP and \fInew\fP define a mapping of bit positions, such that
whatever position is held by the n-th set bit in \fIold\fP is mapped
to the n-th set bit in \fInew\fP.  In the more general case, allowing
for the possibility that the weight 'w' of \fInew\fP is less than the
weight of \fIold\fP, map the position of the n-th set bit in \fIold\fP to
the position of the m-th set bit in \fInew\fP, where m == n % w.

If either of the \fIold\fP and \fInew\fP bitmaps are empty, or if \fIsrc\fP and
\fIdst\fP point to the same location, then this routine copies \fIsrc\fP
to \fIdst\fP.

The positions of unset bits in \fIold\fP are mapped to themselves
(the identify map).

Apply the above specified mapping to \fIsrc\fP, placing the result in
\fIdst\fP, clearing any bits previously set in \fIdst\fP.

For example, lets say that \fIold\fP has bits 4 through 7 set, and
\fInew\fP has bits 12 through 15 set.  This defines the mapping of bit
position 4 to 12, 5 to 13, 6 to 14 and 7 to 15, and of all other
bit positions unchanged.  So if say \fIsrc\fP comes into this routine
with bits 1, 5 and 7 set, then \fIdst\fP should leave with bits 1,
13 and 15 set.
