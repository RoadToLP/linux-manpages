.TH "ext4_free_data" 9 "ext4_free_data" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
ext4_free_data \- free a list of data blocks
.SH SYNOPSIS
.B "void" ext4_free_data
.BI "(handle_t *handle "  ","
.BI "struct inode *inode "  ","
.BI "struct buffer_head *this_bh "  ","
.BI "__le32 *first "  ","
.BI "__le32 *last "  ");"
.SH ARGUMENTS
.IP "handle" 12
handle for this transaction
.IP "inode" 12
inode we are dealing with
.IP "this_bh" 12
indirect buffer_head which contains *\fIfirst\fP and *\fIlast\fP
.IP "first" 12
array of block numbers
.IP "last" 12
points immediately past the end of array
.SH "DESCRIPTION"
We are freeing all blocks referred from that array (numbers are stored as
little-endian 32-bit) and updating \fIinode->i_blocks\fP appropriately.

We accumulate contiguous runs of blocks to free.  Conveniently, if these
blocks are contiguous then releasing them at one time will only affect one
or two bitmap blocks (+ group descriptor(s) and superblock) and we won't
actually use a lot of journal space.

\fIthis_bh\fP will be NULL if \fIfirst\fP and \fIlast\fP point into the inode's direct
block pointers.
