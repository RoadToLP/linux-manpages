.TH "drm_do_get_edid" 9 "drm_do_get_edid" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
drm_do_get_edid \- get EDID data using a custom EDID block read function
.SH SYNOPSIS
.B "struct edid *" drm_do_get_edid
.BI "(struct drm_connector *connector "  ","
.BI "int (*get_edid_block)(void *data, u8 *buf, unsigned int block, size_t len) "  ","
.BI "void *data "  ");"
.SH ARGUMENTS
.IP "connector" 12
connector we're probing
.IP "get_edid_block" 12
EDID block read function
.IP "data" 12
private data passed to the block read function
.SH "DESCRIPTION"
When the I2C adapter connected to the DDC bus is hidden behind a device that
exposes a different interface to read EDID blocks this function can be used
to get EDID data using a custom block read function.

As in the general case the DDC bus is accessible by the kernel at the I2C
level, drivers must make all reasonable efforts to expose it as an I2C
adapter and use \fBdrm_get_edid\fP instead of abusing this function.

The EDID may be overridden using debugfs override_edid or firmare EDID
(\fBdrm_load_edid_firmware\fP and drm.edid_firmware parameter), in this priority
order. Having either of them bypasses actual EDID reads.
.SH "RETURN"
Pointer to valid EDID or NULL if we couldn't find any.
