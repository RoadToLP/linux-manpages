.TH "finish_task_switch" 9 "finish_task_switch" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
finish_task_switch \- clean up after a task-switch
.SH SYNOPSIS
.B "struct rq *" finish_task_switch
.BI "(struct task_struct *prev "  ");"
.SH ARGUMENTS
.IP "prev" 12
the thread we just switched away from.
.SH "DESCRIPTION"
finish_task_switch must be called after the context switch, paired
with a prepare_task_switch call before the context switch.
finish_task_switch will reconcile locking set up by prepare_task_switch,
and do any other architecture-specific cleanup actions.

Note that we may have delayed dropping an mm in \fBcontext_switch\fP. If
so, we finish that here outside of the runqueue lock. (Doing it
with the lock held can cause deadlocks; see \fBschedule\fP for
details.)

The context switch have flipped the stack from under us and restored the
local variables which were saved when this task called \fBschedule\fP in the
past. prev == current is still correct but we need to recalculate this_rq
because prev may have moved to another CPU.
