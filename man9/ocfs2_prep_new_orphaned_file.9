.TH "ocfs2_prep_new_orphaned_file" 9 "ocfs2_prep_new_orphaned_file" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
ocfs2_prep_new_orphaned_file \- Prepare the orphan dir to receive a newly allocated file. This is different from the typical 'add to orphan dir' operation in that the inode does not yet exist. This is a problem because the orphan dir stringifies the inode block number to come up with it's dirent. Obviously if the inode does not yet exist we have a chicken and egg problem. This function works around it by calling deeper into the orphan and suballoc code than other callers. Use this only by necessity.
.SH SYNOPSIS
.B "int" ocfs2_prep_new_orphaned_file
.BI "(struct inode *dir "  ","
.BI "struct buffer_head *dir_bh "  ","
.BI "char *orphan_name "  ","
.BI "struct inode **ret_orphan_dir "  ","
.BI "u64 *ret_di_blkno "  ","
.BI "struct ocfs2_dir_lookup_result *orphan_insert "  ","
.BI "struct ocfs2_alloc_context **ret_inode_ac "  ");"
.SH ARGUMENTS
.IP "dir" 12
The directory which this inode will ultimately wind up under - not the
orphan dir!
.IP "dir_bh" 12
buffer_head the \fIdir\fP inode block
.IP "orphan_name" 12
string of length (CFS2_ORPHAN_NAMELEN + 1). Will be filled
with the string to be used for orphan dirent. Pass back to the orphan dir
code.
.IP "ret_orphan_dir" 12
orphan dir inode returned to be passed back into orphan
dir code.
.IP "ret_di_blkno" 12
block number where the new inode will be allocated.
.IP "orphan_insert" 12
Dir insert context to be passed back into orphan dir code.
.IP "ret_inode_ac" 12
Inode alloc context to be passed back to the allocator.
.SH "DESCRIPTION"
Returns zero on success and the ret_orphan_dir, name and lookup
fields will be populated.

Returns non-zero on failure. 
