.TH "__anon_vma_prepare" 9 "__anon_vma_prepare" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
__anon_vma_prepare \- attach an anon_vma to a memory region
.SH SYNOPSIS
.B "int" __anon_vma_prepare
.BI "(struct vm_area_struct *vma "  ");"
.SH ARGUMENTS
.IP "vma" 12
the memory region in question
.SH "DESCRIPTION"
This makes sure the memory mapping described by 'vma' has
an 'anon_vma' attached to it, so that we can associate the
anonymous pages mapped into it with that anon_vma.

The common case will be that we already have one, which
is handled inline by \fBanon_vma_prepare\fP. But if
not we either need to find an adjacent mapping that we
can re-use the anon_vma from (very common when the only
reason for splitting a vma has been \fBmprotect\fP), or we
allocate a new one.

Anon-vma allocations are very subtle, because we may have
optimistically looked up an anon_vma in \fBpage_lock_anon_vma_read\fP
and that may actually touch the rwsem even in the newly
allocated vma (it depends on RCU to make sure that the
anon_vma isn't actually destroyed).

As a result, we need to do proper anon_vma locking even
for the new allocation. At the same time, we do not want
to do any locking for the common case of already having
an anon_vma.

This must be called with the mmap_lock held for reading.
