.TH "page_cache_next_miss" 9 "page_cache_next_miss" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
page_cache_next_miss \- Find the next gap in the page cache.
.SH SYNOPSIS
.B "pgoff_t" page_cache_next_miss
.BI "(struct address_space *mapping "  ","
.BI "pgoff_t index "  ","
.BI "unsigned long max_scan "  ");"
.SH ARGUMENTS
.IP "mapping" 12
Mapping.
.IP "index" 12
Index.
.IP "max_scan" 12
Maximum range to search.
.SH "DESCRIPTION"
Search the range [index, min(index + max_scan - 1, ULONG_MAX)] for the
gap with the lowest index.

This function may be called under the rcu_read_lock.  However, this will
not atomically search a snapshot of the cache at a single point in time.
For example, if a gap is created at index 5, then subsequently a gap is
created at index 10, page_cache_next_miss covering both indices may
return 10 if called under the rcu_read_lock.
.SH "RETURN"
The index of the gap if found, otherwise an index outside the
range specified (in which case 'return - index >= max_scan' will be true).
In the rare case of index wrap-around, 0 will be returned.
