.TH "bio_alloc_bioset" 9 "bio_alloc_bioset" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
bio_alloc_bioset \- allocate a bio for I/O
.SH SYNOPSIS
.B "struct bio *" bio_alloc_bioset
.BI "(gfp_t gfp_mask "  ","
.BI "unsigned short nr_iovecs "  ","
.BI "struct bio_set *bs "  ");"
.SH ARGUMENTS
.IP "gfp_mask" 12
the GFP_* mask given to the slab allocator
.IP "nr_iovecs" 12
number of iovecs to pre-allocate
.IP "bs" 12
the bio_set to allocate from.
.SH "DESCRIPTION"
Allocate a bio from the mempools in \fIbs\fP.

If __GFP_DIRECT_RECLAIM is set then bio_alloc will always be able to
allocate a bio.  This is due to the mempool guarantees.  To make this work,
callers must never allocate more than 1 bio at a time from the general pool.
Callers that need to allocate more than 1 bio must always submit the
previously allocated bio for IO before attempting to allocate a new one.
Failure to do so can cause deadlocks under memory pressure.

Note that when running under \fBsubmit_bio_noacct\fP (i.e. any block driver),
bios are not submitted until after you return - see the code in
\fBsubmit_bio_noacct\fP that converts recursion into iteration, to prevent
stack overflows.

This would normally mean allocating multiple bios under \fBsubmit_bio_noacct\fP
would be susceptible to deadlocks, but we have
deadlock avoidance code that resubmits any blocked bios from a rescuer
thread.

However, we do not guarantee forward progress for allocations from other
mempools. Doing multiple allocations from the same mempool under
\fBsubmit_bio_noacct\fP should be avoided - instead, use bio_set's front_pad
for per bio allocations.
.SH "RETURN"
Pointer to new bio on success, NULL on failure.
