.TH "class_find_device" 9 "class_find_device" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
class_find_device \- device iterator for locating a particular device
.SH SYNOPSIS
.B "struct device *" class_find_device
.BI "(struct class *class "  ","
.BI "struct device *start "  ","
.BI "const void *data "  ","
.BI "int (*match)(struct device *, const void *) "  ");"
.SH ARGUMENTS
.IP "class" 12
the class we're iterating
.IP "start" 12
Device to begin with
.IP "data" 12
data for the match function
.IP "match" 12
function to check device
.SH "DESCRIPTION"
This is similar to the \fBclass_for_each_dev\fP function above, but it
returns a reference to a device that is 'found' for later use, as
determined by the \fImatch\fP callback.

The callback should return 0 if the device doesn't match and non-zero
if it does.  If the callback returns non-zero, this function will
return to the caller and not iterate over any more devices.

Note, you will need to drop the reference with \fBput_device\fP after use.

\fImatch\fP is allowed to do anything including calling back into class
code.  There's no locking restriction.
