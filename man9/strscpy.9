.TH "strscpy" 9 "strscpy" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
strscpy \- Copy a C-string into a sized buffer
.SH SYNOPSIS
.B "ssize_t" strscpy
.BI "(char *dest "  ","
.BI "const char *src "  ","
.BI "size_t count "  ");"
.SH ARGUMENTS
.IP "dest" 12
Where to copy the string to
.IP "src" 12
Where to copy the string from
.IP "count" 12
Size of destination buffer
.SH "DESCRIPTION"
Copy the string, or as much of it as fits, into the dest buffer.  The
behavior is undefined if the string buffers overlap.  The destination
buffer is always NUL terminated, unless it's zero-sized.

Preferred to \fBstrlcpy\fP since the API doesn't require reading memory
from the src string beyond the specified "count" bytes, and since
the return value is easier to error-check than \fBstrlcpy\fP's.
In addition, the implementation is robust to the string changing out
from underneath it, unlike the current \fBstrlcpy\fP implementation.

Preferred to \fBstrncpy\fP since it always returns a valid string, and
doesn't unnecessarily force the tail of the destination buffer to be
zeroed.  If zeroing is desired please use \fBstrscpy_pad\fP.
.SH "RETURN"
* The number of characters copied (not including the trailing NUL)
* -E2BIG if count is 0 or \fIsrc\fP was truncated.
