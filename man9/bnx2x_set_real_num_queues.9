.TH "bnx2x_set_real_num_queues" 9 "bnx2x_set_real_num_queues" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
bnx2x_set_real_num_queues \- configure netdev->real_num_[tx,rx]_queues
.SH SYNOPSIS
.B "int" bnx2x_set_real_num_queues
.BI "(struct bnx2x *bp "  ","
.BI "int include_cnic "  ");"
.SH ARGUMENTS
.IP "bp" 12
Driver handle
.IP "include_cnic" 12
handle cnic case
.SH "DESCRIPTION"
We currently support for at most 16 Tx queues for each CoS thus we will
allocate a multiple of 16 for ETH L2 rings according to the value of the
bp->max_cos.

If there is an FCoE L2 queue the appropriate Tx queue will have the next
index after all ETH L2 indices.

If the actual number of Tx queues (for each CoS) is less than 16 then there
will be the holes at the end of each group of 16 ETh L2 indices (0..15,
16..31,...) with indices that are not coupled with any real Tx queue.

The proper configuration of skb->queue_mapping is handled by
\fBbnx2x_select_queue\fP and \fB__skb_tx_hash\fP.

\fBbnx2x_setup_tc\fP takes care of the proper TC mappings so that \fB__skb_tx_hash\fP
will return a proper Tx index if TC is enabled (netdev->num_tc > 0).
