.TH "bfq_bfqq_charge_time" 9 "bfq_bfqq_charge_time" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
bfq_bfqq_charge_time \- charge an amount of service equivalent to the length of the time interval during which bfqq has been in service.
.SH SYNOPSIS
.B "void" bfq_bfqq_charge_time
.BI "(struct bfq_data *bfqd "  ","
.BI "struct bfq_queue *bfqq "  ","
.BI "unsigned long time_ms "  ");"
.SH ARGUMENTS
.IP "bfqd" 12
the device
.IP "bfqq" 12
the queue that needs a service update.
.IP "time_ms" 12
the amount of time during which the queue has received service
.SH "DESCRIPTION"
If a queue does not consume its budget fast enough, then providing
the queue with service fairness may impair throughput, more or less
severely. For this reason, queues that consume their budget slowly
are provided with time fairness instead of service fairness. This
goal is achieved through the BFQ scheduling engine, even if such an
engine works in the service, and not in the time domain. The trick
is charging these queues with an inflated amount of service, equal
to the amount of service that they would have received during their
service slot if they had been fast, i.e., if their requests had
been dispatched at a rate equal to the estimated peak rate.

It is worth noting that time fairness can cause important
distortions in terms of bandwidth distribution, on devices with
internal queueing. The reason is that I/O requests dispatched
during the service slot of a queue may be served after that service
slot is finished, and may have a total processing time loosely
correlated with the duration of the service slot. This is
especially true for short service slots.
