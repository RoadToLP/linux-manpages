.TH "dma_fence_init" 9 "dma_fence_init" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
dma_fence_init \- Initialize a custom fence.
.SH SYNOPSIS
.B "void" dma_fence_init
.BI "(struct dma_fence *fence "  ","
.BI "const struct dma_fence_ops *ops "  ","
.BI "spinlock_t *lock "  ","
.BI "u64 context "  ","
.BI "u64 seqno "  ");"
.SH ARGUMENTS
.IP "fence" 12
the fence to initialize
.IP "ops" 12
the dma_fence_ops for operations on this fence
.IP "lock" 12
the irqsafe spinlock to use for locking this fence
.IP "context" 12
the execution context this fence is run on
.IP "seqno" 12
a linear increasing sequence number for this context
.SH "DESCRIPTION"
Initializes an allocated fence, the caller doesn't have to keep its
refcount after committing with this fence, but it will need to hold a
refcount again if \fIdma_fence_ops.enable_signaling\fP gets called.

context and seqno are used for easy comparison between fences, allowing
to check which fence is later by simply using \fBdma_fence_later\fP.
