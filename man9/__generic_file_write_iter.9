.TH "__generic_file_write_iter" 9 "__generic_file_write_iter" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
__generic_file_write_iter \- write data to a file
.SH SYNOPSIS
.B "ssize_t" __generic_file_write_iter
.BI "(struct kiocb *iocb "  ","
.BI "struct iov_iter *from "  ");"
.SH ARGUMENTS
.IP "iocb" 12
IO state structure (file, offset, etc.)
.IP "from" 12
iov_iter with data to write
.SH "DESCRIPTION"
This function does all the work needed for actually writing data to a
file. It does all basic checks, removes SUID from the file, updates
modification times and calls proper subroutines depending on whether we
do direct IO or a standard buffered write.

It expects i_mutex to be grabbed unless we work on a block device or similar
object which does not need locking at all.

This function does *not* take care of syncing data in case of O_SYNC write.
A caller has to handle it. This is mainly due to the fact that we want to
avoid syncing under i_mutex.
.SH "RETURN"
* number of bytes written, even for truncated writes
* negative error code if no data has been written at all
