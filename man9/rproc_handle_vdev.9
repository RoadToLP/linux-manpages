.TH "rproc_handle_vdev" 9 "rproc_handle_vdev" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
rproc_handle_vdev \- handle a vdev fw resource
.SH SYNOPSIS
.B "int" rproc_handle_vdev
.BI "(struct rproc *rproc "  ","
.BI "struct fw_rsc_vdev *rsc "  ","
.BI "int offset "  ","
.BI "int avail "  ");"
.SH ARGUMENTS
.IP "rproc" 12
the remote processor
.IP "rsc" 12
the vring resource descriptor
.IP "offset" 12
offset of the resource entry
.IP "avail" 12
size of available data (for sanity checking the image)
.SH "DESCRIPTION"
This resource entry requests the host to statically register a virtio
device (vdev), and setup everything needed to support it. It contains
everything needed to make it possible: the virtio device id, virtio
device features, vrings information, virtio config space, etc...

Before registering the vdev, the vrings are allocated from non-cacheable
physically contiguous memory. Currently we only support two vrings per
remote processor (temporary limitation). We might also want to consider
doing the vring allocation only later when ->\fBfind_vqs\fP is invoked, and
then release them upon ->\fBdel_vqs\fP.

Returns 0 on success, or an appropriate error code otherwise
.SH "NOTE"
\fIda\fP is currently not really handled correctly: we dynamically
allocate it using the DMA API, ignoring requested hard coded addresses,
and we don't take care of any required IOMMU programming. This is all
going to be taken care of when the generic iommu-based DMA API will be
merged. Meanwhile, statically-addressed iommu-based firmware images should
use RSC_DEVMEM resource entries to map their required \fIda\fP to the physical
address of their base CMA region (ouch, hacky!).
