.TH "hfi1_process_mad" 9 "hfi1_process_mad" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
hfi1_process_mad \- process an incoming MAD packet
.SH SYNOPSIS
.B "int" hfi1_process_mad
.BI "(struct ib_device *ibdev "  ","
.BI "int mad_flags "  ","
.BI "u8 port "  ","
.BI "const struct ib_wc *in_wc "  ","
.BI "const struct ib_grh *in_grh "  ","
.BI "const struct ib_mad *in_mad "  ","
.BI "struct ib_mad *out_mad "  ","
.BI "size_t *out_mad_size "  ","
.BI "u16 *out_mad_pkey_index "  ");"
.SH ARGUMENTS
.IP "ibdev" 12
the infiniband device this packet came in on
.IP "mad_flags" 12
MAD flags
.IP "port" 12
the port number this packet came in on
.IP "in_wc" 12
the work completion entry for this packet
.IP "in_grh" 12
the global route header for this packet
.IP "in_mad" 12
the incoming MAD
.IP "out_mad" 12
any outgoing MAD reply
.IP "out_mad_size" 12
size of the outgoing MAD reply
.IP "out_mad_pkey_index" 12
used to apss back the packet key index
.SH "DESCRIPTION"
Returns IB_MAD_RESULT_SUCCESS if this is a MAD that we are not
interested in processing.

Note that the verbs framework has already done the MAD sanity checks,
and hop count/pointer updating for IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE
MADs.

This is called by the ib_mad module.
