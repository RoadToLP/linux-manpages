.TH "poll_state_synchronize_srcu" 9 "poll_state_synchronize_srcu" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
poll_state_synchronize_srcu \- Has cookie's grace period ended?
.SH SYNOPSIS
.B "bool" poll_state_synchronize_srcu
.BI "(struct srcu_struct *ssp "  ","
.BI "unsigned long cookie "  ");"
.SH ARGUMENTS
.IP "ssp" 12
srcu_struct to provide cookie for.
.IP "cookie" 12
Return value from \fBget_state_synchronize_srcu\fP or \fBstart_poll_synchronize_srcu\fP.
.SH "DESCRIPTION"
This function takes the cookie that was returned from either
\fBget_state_synchronize_srcu\fP or \fBstart_poll_synchronize_srcu\fP, and
returns \fItrue\fP if an SRCU grace period elapsed since the time that the
cookie was created.

Because cookies are finite in size, wrapping/overflow is possible.
This is more pronounced on 32-bit systems where cookies are 32 bits,
where in theory wrapping could happen in about 14 hours assuming
25-microsecond expedited SRCU grace periods.  However, a more likely
overflow lower bound is on the order of 24 days in the case of
one-millisecond SRCU grace periods.  Of course, wrapping in a 64-bit
system requires geologic timespans, as in more than seven million years
even for expedited SRCU grace periods.

Wrapping/overflow is much more of an issue for CONFIG_SMP=n systems
that also have CONFIG_PREEMPTION=n, which selects Tiny SRCU.  This uses
a 16-bit cookie, which rcutorture routinely wraps in a matter of a
few minutes.  If this proves to be a problem, this counter will be
expanded to the same size as for Tree SRCU.
