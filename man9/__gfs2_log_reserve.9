.TH "__gfs2_log_reserve" 9 "__gfs2_log_reserve" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
__gfs2_log_reserve \- Make a log reservation
.SH SYNOPSIS
.B "void" __gfs2_log_reserve
.BI "(struct gfs2_sbd *sdp "  ","
.BI "unsigned int blks "  ","
.BI "unsigned int taboo_blks "  ");"
.SH ARGUMENTS
.IP "sdp" 12
The GFS2 superblock
.IP "blks" 12
The number of blocks to reserve
.IP "taboo_blks" 12
The number of blocks to leave free
.SH "DESCRIPTION"
\fItaboo_blks\fP is set to 0 for logd, and to GFS2_LOG_FLUSH_MIN_BLOCKS
for all other processes.  This ensures that when the log is almost full,
logd will still be able to call gfs2_log_flush one more time  without
blocking, which will advance the tail and make some more log space
available.

We no longer flush the log here, instead we wake up logd to do that
for us. To avoid the thundering herd and to ensure that we deal fairly
with queued waiters, we use an exclusive wait. This means that when we
get woken with enough journal space to get our reservation, we need to
wake the next waiter on the list.
