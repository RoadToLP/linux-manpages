.TH "spi_async_locked" 9 "spi_async_locked" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
spi_async_locked \- version of spi_async with exclusive bus usage
.SH SYNOPSIS
.B "int" spi_async_locked
.BI "(struct spi_device *spi "  ","
.BI "struct spi_message *message "  ");"
.SH ARGUMENTS
.IP "spi" 12
device with which data will be exchanged
.IP "message" 12
describes the data transfers, including completion callback
.SH "CONTEXT"
any (irqs may be blocked, etc)
.SH "DESCRIPTION"
This call may be used in_irq and other contexts which can't sleep,
as well as from task contexts which can sleep.

The completion callback is invoked in a context which can't sleep.
Before that invocation, the value of message->status is undefined.
When the callback is issued, message->status holds either zero (to
indicate complete success) or a negative error code.  After that
callback returns, the driver which issued the transfer request may
deallocate the associated memory; it's no longer in use by any SPI
core or controller driver code.

Note that although all messages to a spi_device are handled in
FIFO order, messages may go to different devices in other orders.
Some device might be higher priority, or have various "hard" access
time requirements, for example.

On detection of any fault during the transfer, processing of
the entire message is aborted, and the device is deselected.
Until returning from the associated message completion callback,
no other spi_message queued to that device will be processed.
(This rule applies equally to all the synchronous transfer calls,
which are wrappers around this core asynchronous primitive.)
.SH "RETURN"
zero on success, else a negative error code.
