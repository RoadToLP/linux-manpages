.TH "ntfs_external_attr_find" 9 "ntfs_external_attr_find" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
ntfs_external_attr_find \- find an attribute in the attribute list of an inode
.SH SYNOPSIS
.B "int" ntfs_external_attr_find
.BI "(const ATTR_TYPE type "  ","
.BI "const ntfschar *name "  ","
.BI "const u32 name_len "  ","
.BI "const IGNORE_CASE_BOOL ic "  ","
.BI "const VCN lowest_vcn "  ","
.BI "const u8 *val "  ","
.BI "const u32 val_len "  ","
.BI "ntfs_attr_search_ctx *ctx "  ");"
.SH ARGUMENTS
.IP "type" 12
attribute type to find
.IP "name" 12
attribute name to find (optional, i.e. NULL means don't care)
.IP "name_len" 12
attribute name length (only needed if \fIname\fP present)
.IP "ic" 12
IGNORE_CASE or CASE_SENSITIVE (ignored if \fIname\fP not present)
.IP "lowest_vcn" 12
lowest vcn to find (optional, non-resident attributes only)
.IP "val" 12
attribute value to find (optional, resident attributes only)
.IP "val_len" 12
attribute value length
.IP "ctx" 12
search context with mft record and attribute to search from
.SH "DESCRIPTION"
You should not need to call this function directly.  Use \fBntfs_attr_lookup\fP
instead.

Find an attribute by searching the attribute list for the corresponding
attribute list entry.  Having found the entry, map the mft record if the
attribute is in a different mft record/inode, \fBntfs_attr_find\fP the attribute
in there and return it.

On first search \fIctx->ntfs_ino\fP must be the base mft record and \fIctx\fP must
have been obtained from a call to \fBntfs_attr_get_search_ctx\fP.  On subsequent
calls \fIctx->ntfs_ino\fP can be any extent inode, too (\fIctx->base_ntfs_ino\fP is
then the base inode).

After finishing with the attribute/mft record you need to call
\fBntfs_attr_put_search_ctx\fP to cleanup the search context (unmapping any
mapped inodes, etc).

If the attribute is found, \fBntfs_external_attr_find\fP returns 0 and
\fIctx->attr\fP will point to the found attribute.  \fIctx->mrec\fP will point to the
mft record in which \fIctx->attr\fP is located and \fIctx->al_entry\fP will point to
the attribute list entry for the attribute.

If the attribute is not found, \fBntfs_external_attr_find\fP returns -ENOENT and
\fIctx->attr\fP will point to the attribute in the base mft record before which
the attribute being searched for would need to be inserted if such an action
were to be desired.  \fIctx->mrec\fP will point to the mft record in which
\fIctx->attr\fP is located and \fIctx->al_entry\fP will point to the attribute list
entry of the attribute before which the attribute being searched for would
need to be inserted if such an action were to be desired.

Thus to insert the not found attribute, one wants to add the attribute to
\fIctx->mrec\fP (the base mft record) and if there is not enough space, the
attribute should be placed in a newly allocated extent mft record.  The
attribute list entry for the inserted attribute should be inserted in the
attribute list attribute at \fIctx->al_entry\fP.

On actual error, \fBntfs_external_attr_find\fP returns -EIO.  In this case
\fIctx->attr\fP is undefined and in particular do not rely on it not changing.
