.TH "audit_log_start" 9 "audit_log_start" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
audit_log_start \- obtain an audit buffer
.SH SYNOPSIS
.B "struct audit_buffer *" audit_log_start
.BI "(struct audit_context *ctx "  ","
.BI "gfp_t gfp_mask "  ","
.BI "int type "  ");"
.SH ARGUMENTS
.IP "ctx" 12
audit_context (may be NULL)
.IP "gfp_mask" 12
type of allocation
.IP "type" 12
audit message type
.SH "DESCRIPTION"
Returns audit_buffer pointer on success or NULL on error.

Obtain an audit buffer.  This routine does locking to obtain the
audit buffer, but then no locking is required for calls to
audit_log_*format.  If the task (ctx) is a task that is currently in a
syscall, then the syscall is marked as auditable and an audit record
will be written at syscall exit.  If there is no associated task, then
task context (ctx) should be NULL.
