.TH "usb_queue_reset_device" 9 "usb_queue_reset_device" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
usb_queue_reset_device \- Reset a USB device from an atomic context
.SH SYNOPSIS
.B "void" usb_queue_reset_device
.BI "(struct usb_interface *iface "  ");"
.SH ARGUMENTS
.IP "iface" 12
USB interface belonging to the device to reset
.SH "DESCRIPTION"
This function can be used to reset a USB device from an atomic
context, where \fBusb_reset_device\fP won't work (as it blocks).

Doing a reset via this method is functionally equivalent to calling
\fBusb_reset_device\fP, except for the fact that it is delayed to a
workqueue. This means that any drivers bound to other interfaces
might be unbound, as well as users from usbfs in user space.

Corner cases:

- Scheduling two resets at the same time from two different drivers
attached to two different interfaces of the same device is
possible; depending on how the driver attached to each interface
handles ->\fBpre_reset\fP, the second reset might happen or not.

- If the reset is delayed so long that the interface is unbound from
its driver, the reset will be skipped.

- This function can be called during .\fBprobe\fP.  It can also be called
during .\fBdisconnect\fP, but doing so is pointless because the reset
will not occur.  If you really want to reset the device during
\&.\fBdisconnect\fP, call \fBusb_reset_device\fP directly -- but watch out
for nested unbinding issues!
