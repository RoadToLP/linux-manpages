.TH "to_sas_gpio_gp_bit" 9 "to_sas_gpio_gp_bit" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
to_sas_gpio_gp_bit \- given the gpio frame data find the byte/bit position of 'od'
.SH SYNOPSIS
.B "u8 *" to_sas_gpio_gp_bit
.BI "(unsigned int od "  ","
.BI "u8 *data "  ","
.BI "u8 index "  ","
.BI "u8 count "  ","
.BI "u8 *bit "  ");"
.SH ARGUMENTS
.IP "od" 12
od bit to find
.IP "data" 12
incoming bitstream (from frame)
.IP "index" 12
requested data register index (from frame)
.IP "count" 12
total number of registers in the bitstream (from frame)
.IP "bit" 12
bit position of 'od' in the returned byte
.SH "DESCRIPTION"
returns NULL if 'od' is not in 'data'

From SFF-8485 v0.7:
"In GPIO_TX[1], bit 0 of byte 3 contains the first bit (i.e., OD0.0)
and bit 7 of byte 0 contains the 32nd bit (i.e., OD10.1).

In GPIO_TX[2], bit 0 of byte 3 contains the 33rd bit (i.e., OD10.2)
and bit 7 of byte 0 contains the 64th bit (i.e., OD21.0)."

The general-purpose (raw-bitstream) RX registers have the same layout
although 'od' is renamed 'id' for 'input data'.

SFF-8489 defines the behavior of the LEDs in response to the 'od' values.
