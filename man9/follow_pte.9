.TH "follow_pte" 9 "follow_pte" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
follow_pte \- look up PTE at a user virtual address
.SH SYNOPSIS
.B "int" follow_pte
.BI "(struct mm_struct *mm "  ","
.BI "unsigned long address "  ","
.BI "pte_t **ptepp "  ","
.BI "spinlock_t **ptlp "  ");"
.SH ARGUMENTS
.IP "mm" 12
the mm_struct of the target address space
.IP "address" 12
user virtual address
.IP "ptepp" 12
location to store found PTE
.IP "ptlp" 12
location to store the lock for the PTE
.SH "DESCRIPTION"
On a successful return, the pointer to the PTE is stored in \fIptepp\fP;
the corresponding lock is taken and its location is stored in \fIptlp\fP.
The contents of the PTE are only stable until \fIptlp\fP is released;
any further use, if any, must be protected against invalidation
with MMU notifiers.

Only IO mappings and raw PFN mappings are allowed.  The mmap semaphore
should be taken for read.

KVM uses this function.  While it is arguably less bad than ``follow_pfn``,
it is not a good general-purpose API.
.SH "RETURN"
zero on success, -ve otherwise.
