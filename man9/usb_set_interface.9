.TH "usb_set_interface" 9 "usb_set_interface" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
usb_set_interface \- Makes a particular alternate setting be current
.SH SYNOPSIS
.B "int" usb_set_interface
.BI "(struct usb_device *dev "  ","
.BI "int interface "  ","
.BI "int alternate "  ");"
.SH ARGUMENTS
.IP "dev" 12
the device whose interface is being updated
.IP "interface" 12
the interface being updated
.IP "alternate" 12
the setting being chosen.
.SH "CONTEXT"
task context, might sleep.
.SH "DESCRIPTION"
This is used to enable data transfers on interfaces that may not
be enabled by default.  Not all devices support such configurability.
Only the driver bound to an interface may change its setting.

Within any given configuration, each interface may have several
alternative settings.  These are often used to control levels of
bandwidth consumption.  For example, the default setting for a high
speed interrupt endpoint may not send more than 64 bytes per microframe,
while interrupt transfers of up to 3KBytes per microframe are legal.
Also, isochronous endpoints may never be part of an
interface's default setting.  To access such bandwidth, alternate
interface settings must be made current.

Note that in the Linux USB subsystem, bandwidth associated with
an endpoint in a given alternate setting is not reserved until an URB
is submitted that needs that bandwidth.  Some other operating systems
allocate bandwidth early, when a configuration is chosen.

xHCI reserves bandwidth and configures the alternate setting in
\fBusb_hcd_alloc_bandwidth\fP. If it fails the original interface altsetting
may be disabled. Drivers cannot rely on any particular alternate
setting being in effect after a failure.

This call is synchronous, and may not be used in an interrupt context.
Also, drivers must not change altsettings while urbs are scheduled for
endpoints in that interface; all such urbs must first be completed
(perhaps forced by unlinking).
.SH "RETURN"
Zero on success, or else the status code returned by the
underlying \fBusb_control_msg\fP call.
