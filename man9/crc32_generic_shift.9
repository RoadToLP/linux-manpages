.TH "crc32_generic_shift" 9 "crc32_generic_shift" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
crc32_generic_shift \- Append @len 0 bytes to crc, in logarithmic time
.SH SYNOPSIS
.B "u32 __attribute_const__" crc32_generic_shift
.BI "(u32 crc "  ","
.BI "size_t len "  ","
.BI "u32 polynomial "  ");"
.SH ARGUMENTS
.IP "crc" 12
The original little-endian CRC (i.e. lsbit is x^31 coefficient)
.IP "len" 12
The number of bytes. \fIcrc\fP is multiplied by x^(8*\fIlen\fP)
.IP "polynomial" 12
The modulus used to reduce the result to 32 bits.
.SH "DESCRIPTION"
It's possible to parallelize CRC computations by computing a CRC
over separate ranges of a buffer, then summing them.
This shifts the given CRC by 8*len bits (i.e. produces the same effect
as appending len bytes of zero to the data), in time proportional
to log(len).
