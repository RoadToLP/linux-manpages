.TH "tcp_out_of_resources" 9 "tcp_out_of_resources" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
tcp_out_of_resources \- Close socket if out of resources
.SH SYNOPSIS
.B "int" tcp_out_of_resources
.BI "(struct sock *sk "  ","
.BI "bool do_reset "  ");"
.SH ARGUMENTS
.IP "sk" 12
pointer to current socket
.IP "do_reset" 12
send a last packet with reset flag

Do not allow orphaned sockets to eat all our resources.
This is direct violation of TCP specs, but it is required
to prevent DoS attacks. It is called when a retransmission timeout
or zero probe timeout occurs on orphaned socket.

Also close if our net namespace is exiting; in that case there is no
hope of ever communicating again since all netns interfaces are already
down (or about to be down), and we need to release our dst references,
which have been moved to the netns loopback interface, so the namespace
can finish exiting.  This condition is only possible if we are a kernel
socket, as those do not hold references to the namespace.

Criteria is still not confirmed experimentally and may change.
We kill the socket, if:
1. If number of orphaned sockets exceeds an administratively configured
limit.
2. If we have strong memory pressure.
3. If our net namespace is exiting.
