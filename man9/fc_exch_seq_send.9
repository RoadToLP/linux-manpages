.TH "fc_exch_seq_send" 9 "fc_exch_seq_send" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
fc_exch_seq_send \- Send a frame using a new exchange and sequence
.SH SYNOPSIS
.B "struct fc_seq *" fc_exch_seq_send
.BI "(struct fc_lport *lport "  ","
.BI "struct fc_frame *fp "  ","
.BI "void (*resp)(struct fc_seq *, struct fc_frame *fp, void *arg) "  ","
.BI "void (*destructor)(struct fc_seq *, void *) "  ","
.BI "void *arg "  ","
.BI "u32 timer_msec "  ");"
.SH ARGUMENTS
.IP "lport" 12
The local port to send the frame on
.IP "fp" 12
The frame to be sent
.IP "resp" 12
The response handler for this request
.IP "destructor" 12
The destructor for the exchange
.IP "arg" 12
The argument to be passed to the response handler
.IP "timer_msec" 12
The timeout period for the exchange
.SH "DESCRIPTION"
The exchange response handler is set in this routine to \fBresp\fP
function pointer. It can be called in two scenarios: if a timeout
occurs or if a response frame is received for the exchange. The
fc_frame pointer in response handler will also indicate timeout
as error using IS_ERR related macros.

The exchange destructor handler is also set in this routine.
The destructor handler is invoked by EM layer when exchange
is about to free, this can be used by caller to free its
resources along with exchange free.

The arg is passed back to resp and destructor handler.

The timeout value (in msec) for an exchange is set if non zero
timer_msec argument is specified. The timer is canceled when
it fires or when the exchange is done. The exchange timeout handler
is registered by EM layer.

The frame pointer with some of the header's fields must be
filled before calling this routine, those fields are:

- routing control
- FC port did
- FC port sid
- FC header type
- frame control
- parameter or relative offset
