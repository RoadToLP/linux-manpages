.TH "samsung_gpio_pm_2bit_resume" 9 "samsung_gpio_pm_2bit_resume" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
samsung_gpio_pm_2bit_resume \- restore the given GPIO bank
.SH SYNOPSIS
.B "void" samsung_gpio_pm_2bit_resume
.BI "(struct samsung_gpio_chip *chip "  ");"
.SH ARGUMENTS
.IP "chip" 12
The chip information to resume.
.SH "DESCRIPTION"
Restore one of the GPIO banks that was saved during suspend. This is
not as simple as once thought, due to the possibility of glitches
from the order that the CON and DAT registers are set in.

The three states the pin can be are {IN,OUT,SFN} which gives us 9
combinations of changes to check. Three of these, if the pin stays
in the same configuration can be discounted. This leaves us with
the following:

{ IN => OUT }  Change DAT first
{ IN => SFN }  Change CON first
{ OUT => SFN } Change CON first, so new data will not glitch
{ OUT => IN }  Change CON first, so new data will not glitch
{ SFN => IN }  Change CON first
{ SFN => OUT } Change DAT first, so new data will not glitch [1]

We do not currently deal with the UP registers as these control
weak resistors, so a small delay in change should not need to bring
these into the calculations.

[1] this assumes that writing to a pin DAT whilst in SFN will set the
state for when it is next output.
