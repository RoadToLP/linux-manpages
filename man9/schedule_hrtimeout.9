.TH "schedule_hrtimeout" 9 "schedule_hrtimeout" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
schedule_hrtimeout \- sleep until timeout
.SH SYNOPSIS
.B "int" schedule_hrtimeout
.BI "(ktime_t *expires "  ","
.BI "const enum hrtimer_mode mode "  ");"
.SH ARGUMENTS
.IP "expires" 12
timeout value (ktime_t)
.IP "mode" 12
timer mode
.SH "DESCRIPTION"
Make the current task sleep until the given expiry time has
elapsed. The routine will return immediately unless
the current task state has been set (see \fBset_current_state\fP).

You can set the task state as follows -

TASK_UNINTERRUPTIBLE - at least \fItimeout\fP time is guaranteed to
pass before the routine returns unless the current task is explicitly
woken up, (e.g. by \fBwake_up_process\fP).

TASK_INTERRUPTIBLE - the routine may return early if a signal is
delivered to the current task or the current task is explicitly woken
up.

The current task state is guaranteed to be TASK_RUNNING when this
routine returns.

Returns 0 when the timer has expired. If the task was woken before the
timer expired by a signal (only possible in state TASK_INTERRUPTIBLE) or
by an explicit wakeup, it returns -EINTR.
