.TH "_copy_mc_to_iter" 9 "_copy_mc_to_iter" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
_copy_mc_to_iter \- copy to iter with source memory error exception handling
.SH SYNOPSIS
.B "size_t" _copy_mc_to_iter
.BI "(const void *addr "  ","
.BI "size_t bytes "  ","
.BI "struct iov_iter *i "  ");"
.SH ARGUMENTS
.IP "addr" 12
source kernel address
.IP "bytes" 12
total transfer length
.IP "i" 12
-- undescribed --
.SH "DESCRIPTION"
The pmem driver deploys this for the dax operation
(\fBdax_copy_to_iter\fP) for dax reads (bypass page-cache and the
block-layer). Upon #MC read(2) aborts and returns EIO or the bytes
successfully copied.

The main differences between this and typical \fB_copy_to_iter\fP.

* Typical tail/residue handling after a fault retries the copy
byte-by-byte until the fault happens again. Re-triggering machine
checks is potentially fatal so the implementation uses source
alignment and poison alignment assumptions to avoid re-triggering
hardware exceptions.

* ITER_KVEC, ITER_PIPE, and ITER_BVEC can return short copies.
Compare to \fBcopy_to_iter\fP where only ITER_IOVEC attempts might return
a short copy.
