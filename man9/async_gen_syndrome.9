.TH "async_gen_syndrome" 9 "async_gen_syndrome" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
async_gen_syndrome \- asynchronously calculate a raid6 syndrome
.SH SYNOPSIS
.B "struct dma_async_tx_descriptor *" async_gen_syndrome
.BI "(struct page **blocks "  ","
.BI "unsigned int *offsets "  ","
.BI "int disks "  ","
.BI "size_t len "  ","
.BI "struct async_submit_ctl *submit "  ");"
.SH ARGUMENTS
.IP "blocks" 12
source blocks from idx 0..disks-3, P \fI\fP disks-2 and Q \fI\fP disks-1
.IP "offsets" 12
offset array into each block (src and dest) to start transaction
.IP "disks" 12
number of blocks (including missing P or Q, see below)
.IP "len" 12
length of operation in bytes
.IP "submit" 12
submission/completion modifiers
.SH "DESCRIPTION"
General note: This routine assumes a field of GF(2^8) with a
primitive polynomial of 0x11d and a generator of {02}.

'disks' note: callers can optionally omit either P or Q (but not
both) from the calculation by setting blocks[disks-2] or
blocks[disks-1] to NULL.  When P or Q is omitted 'len' must be <=
PAGE_SIZE as a temporary buffer of this size is used in the
synchronous path.  'disks' always accounts for both destination
buffers.  If any source buffers (blocks[i] where i < disks - 2) are
set to NULL those buffers will be replaced with the raid6_zero_page
in the synchronous path and omitted in the hardware-asynchronous
path.
