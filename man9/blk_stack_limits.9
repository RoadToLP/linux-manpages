.TH "blk_stack_limits" 9 "blk_stack_limits" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
blk_stack_limits \- adjust queue_limits for stacked devices
.SH SYNOPSIS
.B "int" blk_stack_limits
.BI "(struct queue_limits *t "  ","
.BI "struct queue_limits *b "  ","
.BI "sector_t start "  ");"
.SH ARGUMENTS
.IP "t" 12
the stacking driver limits (top device)
.IP "b" 12
the underlying queue limits (bottom, component device)
.IP "start" 12
first data sector within component device
.SH "DESCRIPTION"
This function is used by stacking drivers like MD and DM to ensure
that all component devices have compatible block sizes and
alignments.  The stacking driver must provide a queue_limits
struct (top) and then iteratively call the stacking function for
all component (bottom) devices.  The stacking function will
attempt to combine the values and ensure proper alignment.

Returns 0 if the top and bottom queue_limits are compatible.  The
top device's block sizes and alignment offsets may be adjusted to
ensure alignment with the bottom device. If no compatible sizes
and alignments exist, -1 is returned and the resulting top
queue_limits will have the misaligned flag set to indicate that
the alignment_offset is undefined.
