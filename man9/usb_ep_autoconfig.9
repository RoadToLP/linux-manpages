.TH "usb_ep_autoconfig" 9 "usb_ep_autoconfig" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
usb_ep_autoconfig \- choose an endpoint matching the descriptor
.SH SYNOPSIS
.B "struct usb_ep *" usb_ep_autoconfig
.BI "(struct usb_gadget *gadget "  ","
.BI "struct usb_endpoint_descriptor *desc "  ");"
.SH ARGUMENTS
.IP "gadget" 12
The device to which the endpoint must belong.
.IP "desc" 12
Endpoint descriptor, with endpoint direction and transfer mode
initialized.  For periodic transfers, the maximum packet
size must also be initialized.  This is modified on success.
.SH "DESCRIPTION"
By choosing an endpoint to use with the specified descriptor, this
routine simplifies writing gadget drivers that work with multiple
USB device controllers.  The endpoint would be passed later to
\fBusb_ep_enable\fP, along with some descriptor.

That second descriptor won't always be the same as the first one.
For example, isochronous endpoints can be autoconfigured for high
bandwidth, and then used in several lower bandwidth altsettings.
Also, high and full speed descriptors will be different.

Be sure to examine and test the results of autoconfiguration on your
hardware.  This code may not make the best choices about how to use the
USB controller, and it can't know all the restrictions that may apply.
Some combinations of driver and hardware won't be able to autoconfigure.

On success, this returns an claimed usb_ep, and modifies the endpoint
descriptor bEndpointAddress.  For bulk endpoints, the wMaxPacket value
is initialized as if the endpoint were used at full speed. Because of
that the users must consider adjusting the autoconfigured descriptor.
To prevent the endpoint from being returned by a later autoconfig call,
claims it by assigning ep->claimed to true.

On failure, this returns a null endpoint descriptor.
