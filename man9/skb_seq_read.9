.TH "skb_seq_read" 9 "skb_seq_read" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
skb_seq_read \- Sequentially read skb data
.SH SYNOPSIS
.B "unsigned int" skb_seq_read
.BI "(unsigned int consumed "  ","
.BI "const u8 **data "  ","
.BI "struct skb_seq_state *st "  ");"
.SH ARGUMENTS
.IP "consumed" 12
number of bytes consumed by the caller so far
.IP "data" 12
destination pointer for data to be returned
.IP "st" 12
state variable
.SH "DESCRIPTION"
Reads a block of skb data at \fIconsumed\fP relative to the
lower offset specified to \fBskb_prepare_seq_read\fP. Assigns
the head of the data block to \fIdata\fP and returns the length
of the block or 0 if the end of the skb data or the upper
offset has been reached.

The caller is not required to consume all of the data
returned, i.e. \fIconsumed\fP is typically set to the number
of bytes already consumed and the next call to
\fBskb_seq_read\fP will return the remaining part of the block.

Note 1: The size of each block of data returned can be arbitrary,
this limitation is the cost for zerocopy sequential
reads of potentially non linear data.

Note 2: Fragment lists within fragments are not implemented
at the moment, state->root_skb could be replaced with
a stack for this purpose.
