.TH "ntfs_decompress" 9 "ntfs_decompress" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
ntfs_decompress \- decompress a compression block into an array of pages
.SH SYNOPSIS
.B "int" ntfs_decompress
.BI "(struct page *dest_pages[] "  ","
.BI "int completed_pages[] "  ","
.BI "int *dest_index "  ","
.BI "int *dest_ofs "  ","
.BI "const int dest_max_index "  ","
.BI "const int dest_max_ofs "  ","
.BI "const int xpage "  ","
.BI "char *xpage_done "  ","
.BI "u8 *const cb_start "  ","
.BI "const u32 cb_size "  ","
.BI "const loff_t i_size "  ","
.BI "const s64 initialized_size "  ");"
.SH ARGUMENTS
.IP "dest_pages" 12
destination array of pages
.IP "completed_pages" 12
scratch space to track completed pages
.IP "dest_index" 12
current index into \fIdest_pages\fP (IN/OUT)
.IP "dest_ofs" 12
current offset within \fIdest_pages\fP[\fIdest_index\fP] (IN/OUT)
.IP "dest_max_index" 12
maximum index into \fIdest_pages\fP (IN)
.IP "dest_max_ofs" 12
maximum offset within \fIdest_pages\fP[\fIdest_max_index\fP] (IN)
.IP "xpage" 12
the target page (-1 if none) (IN)
.IP "xpage_done" 12
set to 1 if xpage was completed successfully (IN/OUT)
.IP "cb_start" 12
compression block to decompress (IN)
.IP "cb_size" 12
size of compression block \fIcb_start\fP in bytes (IN)
.IP "i_size" 12
file size when we started the read (IN)
.IP "initialized_size" 12
initialized file size when we started the read (IN)
.SH "DESCRIPTION"
The caller must have disabled preemption. \fBntfs_decompress\fP reenables it when
the critical section is finished.

This decompresses the compression block \fIcb_start\fP into the array of
destination pages \fIdest_pages\fP starting at index \fIdest_index\fP into \fIdest_pages\fP
and at offset \fIdest_pos\fP into the page \fIdest_pages\fP[\fIdest_index\fP].

When the page \fIdest_pages\fP[\fIxpage\fP] is completed, \fIxpage_done\fP is set to 1.
If xpage is -1 or \fIxpage\fP has not been completed, \fIxpage_done\fP is not modified.

\fIcb_start\fP is a pointer to the compression block which needs decompressing
and \fIcb_size\fP is the size of \fIcb_start\fP in bytes (8-64kiB).

Return 0 if success or -EOVERFLOW on error in the compressed stream.
\fIxpage_done\fP indicates whether the target page (\fIdest_pages\fP[\fIxpage\fP]) was
completed during the decompression of the compression block (\fIcb_start\fP).

Warning: This function *REQUIRES* PAGE_SIZE >= 4096 or it will blow up
unpredicatbly! You have been warned!

Note to hackers: This function may not sleep until it has finished accessing
the compression block \fIcb_start\fP as it is a per-CPU buffer.
