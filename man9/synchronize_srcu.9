.TH "synchronize_srcu" 9 "synchronize_srcu" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
synchronize_srcu \- wait for prior SRCU read-side critical-section completion
.SH SYNOPSIS
.B "void" synchronize_srcu
.BI "(struct srcu_struct *ssp "  ");"
.SH ARGUMENTS
.IP "ssp" 12
srcu_struct with which to synchronize.
.SH "DESCRIPTION"
Wait for the count to drain to zero of both indexes. To avoid the
possible starvation of \fBsynchronize_srcu\fP, it waits for the count of
the index=((->srcu_idx & 1) ^ 1) to drain to zero at first,
and then flip the srcu_idx and wait for the count of the other index.

Can block; must be called from process context.

Note that it is illegal to call \fBsynchronize_srcu\fP from the corresponding
SRCU read-side critical section; doing so will result in deadlock.
However, it is perfectly legal to call \fBsynchronize_srcu\fP on one
srcu_struct from some other srcu_struct's read-side critical section,
as long as the resulting graph of srcu_structs is acyclic.

There are memory-ordering constraints implied by \fBsynchronize_srcu\fP.
On systems with more than one CPU, when \fBsynchronize_srcu\fP returns,
each CPU is guaranteed to have executed a full memory barrier since
the end of its last corresponding SRCU read-side critical section
whose beginning preceded the call to \fBsynchronize_srcu\fP.  In addition,
each CPU having an SRCU read-side critical section that extends beyond
the return from \fBsynchronize_srcu\fP is guaranteed to have executed a
full memory barrier after the beginning of \fBsynchronize_srcu\fP and before
the beginning of that SRCU read-side critical section.  Note that these
guarantees include CPUs that are offline, idle, or executing in user mode,
as well as CPUs that are executing in the kernel.

Furthermore, if CPU A invoked \fBsynchronize_srcu\fP, which returned
to its caller on CPU B, then both CPU A and CPU B are guaranteed
to have executed a full memory barrier during the execution of
\fBsynchronize_srcu\fP.  This guarantee applies even if CPU A and CPU B
are the same CPU, but again only if the system has more than one CPU.

Of course, these memory-ordering guarantees apply only when
\fBsynchronize_srcu\fP, \fBsrcu_read_lock\fP, and \fBsrcu_read_unlock\fP are
passed the same srcu_struct structure.

If SRCU is likely idle, expedite the first request.  This semantic
was provided by Classic SRCU, and is relied upon by its users, so TREE
SRCU must also provide it.  Note that detecting idleness is heuristic
and subject to both false positives and negatives.
