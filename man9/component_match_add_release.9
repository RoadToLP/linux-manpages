.TH "component_match_add_release" 9 "component_match_add_release" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
component_match_add_release \- add a component match entry with release callback
.SH SYNOPSIS
.B "void" component_match_add_release
.BI "(struct device *master "  ","
.BI "struct component_match **matchptr "  ","
.BI "void (*release)(struct device *, void *) "  ","
.BI "int (*compare)(struct device *, void *) "  ","
.BI "void *compare_data "  ");"
.SH ARGUMENTS
.IP "master" 12
device with the aggregate driver
.IP "matchptr" 12
pointer to the list of component matches
.IP "release" 12
release function for \fIcompare_data\fP
.IP "compare" 12
compare function to match against all components
.IP "compare_data" 12
opaque pointer passed to the \fIcompare\fP function
.SH "DESCRIPTION"
Adds a new component match to the list stored in \fImatchptr\fP, which the \fImaster\fP
aggregate driver needs to function. The list of component matches pointed to
by \fImatchptr\fP must be initialized to NULL before adding the first match. This
only matches against components added with \fBcomponent_add\fP.

The allocated match list in \fImatchptr\fP is automatically released using devm
actions, where upon \fIrelease\fP will be called to free any references held by
\fIcompare_data\fP, e.g. when \fIcompare_data\fP is a \fIdevice_node\fP that must be
released with \fBof_node_put\fP.

See also \fBcomponent_match_add\fP and \fBcomponent_match_add_typed\fP.
