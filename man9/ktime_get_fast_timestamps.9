.TH "ktime_get_fast_timestamps" 9 "ktime_get_fast_timestamps" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
ktime_get_fast_timestamps \- - NMI safe timestamps
.SH SYNOPSIS
.B "void" ktime_get_fast_timestamps
.BI "(struct ktime_timestamps *snapshot "  ");"
.SH ARGUMENTS
.IP "snapshot" 12
Pointer to timestamp storage
.SH "DESCRIPTION"
Stores clock monotonic, boottime and realtime timestamps.

Boot time is a racy access on 32bit systems if the sleep time injection
happens late during resume and not in \fBtimekeeping_resume\fP. That could
be avoided by expanding struct tk_read_base with boot offset for 32bit
and adding more overhead to the update. As this is a hard to observe
once per resume event which can be filtered with reasonable effort using
the accurate mono/real timestamps, it's probably not worth the trouble.

Aside of that it might be possible on 32 and 64 bit to observe the
following when the sleep time injection happens late:

CPU 0                                CPU 1
\fBtimekeeping_resume\fP
\fBktime_get_fast_timestamps\fP
mono, real = \fB__ktime_get_real_fast\fP
\fBinject_sleep_time\fP
update boot offset
boot = mono + bootoffset;

That means that boot time already has the sleep time adjustment, but
real time does not. On the next readout both are in sync again.

Preventing this for 64bit is not really feasible without destroying the
careful cache layout of the timekeeper because the sequence count and
struct tk_read_base would then need two cache lines instead of one.

Access to the time keeper clock source is disabled accross the innermost
steps of suspend/resume. The accessors still work, but the timestamps
are frozen until time keeping is resumed which happens very early.

For regular suspend/resume there is no observable difference vs. sched
clock, but it might affect some of the nasty low level debug printks.

OTOH, access to sched clock is not guaranteed accross suspend/resume on
all systems either so it depends on the hardware in use.

If that turns out to be a real problem then this could be mitigated by
using sched clock in a similar way as during early boot. But it's not as
trivial as on early boot because it needs some careful protection
against the clock monotonic timestamp jumping backwards on resume.
