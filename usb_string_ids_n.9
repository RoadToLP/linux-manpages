.TH "usb_string_ids_n" 9 "usb_string_ids_n" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
usb_string_ids_n \- allocate unused string IDs in batch
.SH SYNOPSIS
.B "int" usb_string_ids_n
.BI "(struct usb_composite_dev *c "  ","
.BI "unsigned n "  ");"
.SH ARGUMENTS
.IP "c" 12
the device whose string descriptor IDs are being allocated
.IP "n" 12
number of string IDs to allocate
.SH "CONTEXT"
single threaded during gadget setup
.SH "DESCRIPTION"
Returns the first requested ID.  This ID and next \fIn\fP-1 IDs are now
valid IDs.  At least provided that \fIn\fP is non-zero because if it
is, returns last requested ID which is now very useful information.

\fI\fP\fBusb_string_ids_n\fP is called from \fBbind\fP callbacks to allocate
string IDs.  Drivers for functions, configurations, or gadgets will
then store that ID in the appropriate descriptors and string table.

All string identifier should be allocated using this,
\fI\fP\fBusb_string_id\fP or \fI\fP\fBusb_string_ids_n\fP routine, to ensure that for
example different functions don't wrongly assign different meanings
to the same identifier.
