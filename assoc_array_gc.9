.TH "assoc_array_gc" 9 "assoc_array_gc" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
assoc_array_gc \- Garbage collect an associative array.
.SH SYNOPSIS
.B "int" assoc_array_gc
.BI "(struct assoc_array *array "  ","
.BI "const struct assoc_array_ops *ops "  ","
.BI "bool (*iterator)(void *object, void *iterator_data) "  ","
.BI "void *iterator_data "  ");"
.SH ARGUMENTS
.IP "array" 12
The array to clean.
.IP "ops" 12
The operations to use.
.IP "iterator" 12
A callback function to pass judgement on each object.
.IP "iterator_data" 12
Private data for the callback function.
.SH "DESCRIPTION"
Collect garbage from an associative array and pack down the internal tree to
save memory.

The iterator function is asked to pass judgement upon each object in the
array.  If it returns false, the object is discard and if it returns true,
the object is kept.  If it returns true, it must increment the object's
usage count (or whatever it needs to do to retain it) before returning.

This function returns 0 if successful or -ENOMEM if out of memory.  In the
latter case, the array is not changed.

The caller should lock against other modifications and must continue to hold
the lock until \fBassoc_array_apply_edit\fP has been called.

Accesses to the tree may take place concurrently with this function,
provided they hold the RCU read lock.
