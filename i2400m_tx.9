.TH "i2400m_tx" 9 "i2400m_tx" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
i2400m_tx \- send the data in a buffer to the device
.SH SYNOPSIS
.B "int" i2400m_tx
.BI "(struct i2400m *i2400m "  ","
.BI "const void *buf "  ","
.BI "size_t buf_len "  ","
.BI "enum i2400m_pt pl_type "  ");"
.SH ARGUMENTS
.IP "i2400m" 12
device descriptor
.IP "buf" 12
pointer to the buffer to transmit
.IP "buf_len" 12
buffer size
.IP "pl_type" 12
type of the payload we are sending.
.SH "RETURN"
0 if ok, < 0 errno code on error (-ENOSPC, if there is no more
room for the message in the queue).
.SH "DESCRIPTION"
Appends the buffer to the TX FIFO and notifies the bus-specific
part of the driver that there is new data ready to transmit.
Once this function returns, the buffer has been copied, so it can
be reused.

The steps followed to append are explained in detail in the file
header.

Whenever we write to a message, we increase msg->size, so it
reflects exactly how big the message is. This is needed so that if
we concatenate two messages before they can be sent, the code that
sends the messages can find the boundaries (and it will replace the
size with the real barker before sending).
.SH "NOTE"

Cold and warm reset payloads need to be sent as a single
payload, so we handle that.
