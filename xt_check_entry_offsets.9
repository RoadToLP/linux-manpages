.TH "xt_check_entry_offsets" 9 "xt_check_entry_offsets" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
xt_check_entry_offsets \- validate arp/ip/ip6t_entry
.SH SYNOPSIS
.B "int" xt_check_entry_offsets
.BI "(const void *base "  ","
.BI "const char *elems "  ","
.BI "unsigned int target_offset "  ","
.BI "unsigned int next_offset "  ");"
.SH ARGUMENTS
.IP "base" 12
pointer to arp/ip/ip6t_entry
.IP "elems" 12
pointer to first xt_entry_match, i.e. ip(6)t_entry->elems
.IP "target_offset" 12
the arp/ip/ip6_t->target_offset
.IP "next_offset" 12
the arp/ip/ip6_t->next_offset
.SH "DESCRIPTION"
validates that target_offset and next_offset are sane and that all
match sizes (if any) align with the target offset.

This function does not validate the targets or matches themselves, it
only tests that all the offsets and sizes are correct, that all
match structures are aligned, and that the last structure ends where
the target structure begins.

Also see xt_compat_check_entry_offsets for CONFIG_COMPAT version.

The arp/ip/ip6t_entry structure \fIbase\fP must have passed following tests:
- it must point to a valid memory location
- base to base + next_offset must be accessible, i.e. not exceed allocated
length.

A well-formed entry looks like this:

ip(6)t_entry   match [mtdata]  match [mtdata] target [tgdata] ip(6)t_entry
e->elems[]-----'                              |               |
matchsize                      |               |
matchsize      |               |
|               |
target_offset---------------------------------'               |
next_offset---------------------------------------------------'

elems[]: flexible array member at end of ip(6)/arpt_entry struct.
This is where matches (if any) and the target reside.
target_offset: beginning of target.
next_offset: start of the next rule; also: size of this rule.
Since targets have a minimum size, target_offset + minlen <= next_offset.

Every match stores its size, sum of sizes must not exceed target_offset.
.SH "RETURN"
0 on success, negative errno on failure.
