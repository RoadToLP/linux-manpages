.TH "usb_control_msg" 9 "usb_control_msg" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
usb_control_msg \- Builds a control urb, sends it off and waits for completion
.SH SYNOPSIS
.B "int" usb_control_msg
.BI "(struct usb_device *dev "  ","
.BI "unsigned int pipe "  ","
.BI "__u8 request "  ","
.BI "__u8 requesttype "  ","
.BI "__u16 value "  ","
.BI "__u16 index "  ","
.BI "void *data "  ","
.BI "__u16 size "  ","
.BI "int timeout "  ");"
.SH ARGUMENTS
.IP "dev" 12
pointer to the usb device to send the message to
.IP "pipe" 12
endpoint "pipe" to send the message to
.IP "request" 12
USB message request value
.IP "requesttype" 12
USB message request type value
.IP "value" 12
USB message value
.IP "index" 12
USB message index value
.IP "data" 12
pointer to the data to send
.IP "size" 12
length in bytes of the data to send
.IP "timeout" 12
time in msecs to wait for the message to complete before timing
out (if 0 the wait is forever)
.SH "CONTEXT"
task context, might sleep.
.SH "DESCRIPTION"
This function sends a simple control message to a specified endpoint and
waits for the message to complete, or timeout.

Don't use this function from within an interrupt context. If you need
an asynchronous message, or need to send a message from within interrupt
context, use \fBusb_submit_urb\fP. If a thread in your driver uses this call,
make sure your \fBdisconnect\fP method can wait for it to complete. Since you
don't have a handle on the URB used, you can't cancel the request.
.SH "RETURN"
If successful, the number of bytes transferred. Otherwise, a negative
error number.
