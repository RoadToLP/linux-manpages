.TH "pkcs7_verify" 9 "pkcs7_verify" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
pkcs7_verify \- Verify a PKCS#7 message
.SH SYNOPSIS
.B "int" pkcs7_verify
.BI "(struct pkcs7_message *pkcs7 "  ","
.BI "enum key_being_used_for usage "  ");"
.SH ARGUMENTS
.IP "pkcs7" 12
The PKCS#7 message to be verified
.IP "usage" 12
The use to which the key is being put
.SH "DESCRIPTION"
Verify a PKCS#7 message is internally consistent - that is, the data digest
matches the digest in the AuthAttrs and any signature in the message or one
of the X.509 certificates it carries that matches another X.509 cert in the
message can be verified.

This does not look to match the contents of the PKCS#7 message against any
external public keys.

Returns, in order of descending priority:

(*) -EKEYREJECTED if a key was selected that had a usage restriction at
odds with the specified usage, or:

(*) -EKEYREJECTED if a signature failed to match for which we found an
appropriate X.509 certificate, or:

(*) -EBADMSG if some part of the message was invalid, or:

(*) 0 if a signature chain passed verification, or:

(*) -EKEYREJECTED if a blacklisted key was encountered, or:

(*) -ENOPKG if none of the signature chains are verifiable because suitable
crypto modules couldn't be found.
