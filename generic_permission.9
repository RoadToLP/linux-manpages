.TH "generic_permission" 9 "generic_permission" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
generic_permission \- check for access rights on a Posix-like filesystem
.SH SYNOPSIS
.B "int" generic_permission
.BI "(struct user_namespace *mnt_userns "  ","
.BI "struct inode *inode "  ","
.BI "int mask "  ");"
.SH ARGUMENTS
.IP "mnt_userns" 12
user namespace of the mount the inode was found from
.IP "inode" 12
inode to check access rights for
.IP "mask" 12
right to check for (MAY_READ, MAY_WRITE, MAY_EXEC,
MAY_NOT_BLOCK ...)
.SH "DESCRIPTION"
Used to check for read/write/execute permissions on a file.
We use "fsuid" for this, letting us set arbitrary permissions
for filesystem access without changing the "normal" uids which
are used for other things.

generic_permission is rcu-walk aware. It returns -ECHILD in case an rcu-walk
request cannot be satisfied (eg. requires blocking or too much complexity).
It would then be called again in ref-walk mode.

If the inode has been found through an idmapped mount the user namespace of
the vfsmount must be passed through \fImnt_userns\fP. This function will then take
care to map the inode according to \fImnt_userns\fP before checking permissions.
On non-idmapped mounts or if permission checking is to be performed on the
raw inode simply passs init_user_ns.
