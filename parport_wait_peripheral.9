.TH "parport_wait_peripheral" 9 "parport_wait_peripheral" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
parport_wait_peripheral \- wait for status lines to change in 35ms
.SH SYNOPSIS
.B "int" parport_wait_peripheral
.BI "(struct parport *port "  ","
.BI "unsigned char mask "  ","
.BI "unsigned char result "  ");"
.SH ARGUMENTS
.IP "port" 12
port to watch
.IP "mask" 12
status lines to watch
.IP "result" 12
desired values of chosen status lines

This function waits until the masked status lines have the
desired values, or until 35ms have elapsed (see IEEE 1284-1994
page 24 to 25 for why this value in particular is hardcoded).
The \fImask\fP and \fIresult\fP parameters are bitmasks, with the bits
defined by the constants in parport.h: PARPORT_STATUS_BUSY,
and so on.

The port is polled quickly to start off with, in anticipation
of a fast response from the peripheral.  This fast polling
time is configurable (using /proc), and defaults to 500usec.
If the timeout for this port (see \fBparport_set_timeout\fP) is
zero, the fast polling time is 35ms, and this function does
not call \fBschedule\fP.

If the timeout for this port is non-zero, after the fast
polling fails it uses \fBparport_wait_event\fP to wait for up to
10ms, waking up if an interrupt occurs.
