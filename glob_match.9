.TH "glob_match" 9 "glob_match" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
glob_match \- Shell-style pattern matching, like !fnmatch(pat, str, 0)
.SH SYNOPSIS
.B "bool __pure" glob_match
.BI "(char const *pat "  ","
.BI "char const *str "  ");"
.SH ARGUMENTS
.IP "pat" 12
Shell-style pattern to match, e.g. "*.[ch]".
.IP "str" 12
String to match.  The pattern must match the entire string.
.SH "DESCRIPTION"
Perform shell-style glob matching, returning true (1) if the match
succeeds, or false (0) if it fails.  Equivalent to !fnmatch(\fIpat\fP, \fIstr\fP, 0).

Pattern metacharacters are ?, *, [ and \.
(And, inside character classes, !, - and ].)

This is small and simple implementation intended for device blacklists
where a string is matched against a number of patterns.  Thus, it
does not preprocess the patterns.  It is non-recursive, and run-time
is at most quadratic: strlen(\fIstr\fP)*strlen(\fIpat\fP).

An example of the worst case is glob_match("*aaaaa", "aaaaaaaaaa");
it takes 6 passes over the pattern before matching the string.

Like !fnmatch(\fIpat\fP, \fIstr\fP, 0) and unlike the shell, this does NOT
treat / or leading . specially; it isn't actually used for pathnames.

Note that according to glob(7) (and unlike bash), character classes
are complemented by a leading !; this does not support the regex-style
[^a-z] syntax.

An opening bracket without a matching close is matched literally.
