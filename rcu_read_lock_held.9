.TH "rcu_read_lock_held" 9 "rcu_read_lock_held" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
rcu_read_lock_held \- might we be in RCU read-side critical section?
.SH SYNOPSIS
.B "int" rcu_read_lock_held
.BI "(void "  ");"
.SH ARGUMENTS
.IP "void" 12
no arguments
.SH "DESCRIPTION"

If CONFIG_DEBUG_LOCK_ALLOC is selected, returns nonzero iff in an RCU
read-side critical section.  In absence of CONFIG_DEBUG_LOCK_ALLOC,
this assumes we are in an RCU read-side critical section unless it can
prove otherwise.  This is useful for debug checks in functions that
require that they be called within an RCU read-side critical section.

Checks \fBdebug_lockdep_rcu_enabled\fP to prevent false positives during boot
and while lockdep is disabled.

Note that \fBrcu_read_lock\fP and the matching \fBrcu_read_unlock\fP must
occur in the same context, for example, it is illegal to invoke
\fBrcu_read_unlock\fP in process context if the matching \fBrcu_read_lock\fP
was invoked from within an irq handler.

Note that \fBrcu_read_lock\fP is disallowed if the CPU is either idle or
offline from an RCU perspective, so check for those as well.
