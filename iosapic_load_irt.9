.TH "iosapic_load_irt" 9 "iosapic_load_irt" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
iosapic_load_irt \- Fill in the interrupt routing table
.SH SYNOPSIS
.B "int" iosapic_load_irt
.BI "(unsigned long cell_num "  ","
.BI "struct irt_entry **irt "  ");"
.SH ARGUMENTS
.IP "cell_num" 12
The cell number of the CPU we're currently executing on
.IP "irt" 12
The address to place the new IRT at
\fIreturn\fP The number of entries found
.SH "DESCRIPTION"
The "Get PCI INT Routing Table Size" option returns the number of 
entries in the PCI interrupt routing table for the cell specified 
in the cell_number argument.  The cell number must be for a cell 
within the caller's protection domain.

The "Get PCI INT Routing Table" option returns, for the cell 
specified in the cell_number argument, the PCI interrupt routing 
table in the caller allocated memory pointed to by mem_addr.
We assume the IRT only contains entries for I/O SAPIC and
calculate the size based on the size of I/O sapic entries.

The PCI interrupt routing table entry format is derived from the
IA64 SAL Specification 2.4.   The PCI interrupt routing table defines
the routing of PCI interrupt signals between the PCI device output
"pins" and the IO SAPICs' input "lines" (including core I/O PCI
devices).  This table does NOT include information for devices/slots
behind PCI to PCI bridges. See PCI to PCI Bridge Architecture Spec.
for the architected method of routing of IRQ's behind PPB's.
