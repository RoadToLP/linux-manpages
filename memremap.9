.TH "memremap" 9 "memremap" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
memremap \- remap an iomem_resource as cacheable memory
.SH SYNOPSIS
.B "void *" memremap
.BI "(resource_size_t offset "  ","
.BI "size_t size "  ","
.BI "unsigned long flags "  ");"
.SH ARGUMENTS
.IP "offset" 12
iomem resource start address
.IP "size" 12
size of remap
.IP "flags" 12
any of MEMREMAP_WB, MEMREMAP_WT, MEMREMAP_WC,
MEMREMAP_ENC, MEMREMAP_DEC
.SH "DESCRIPTION"
\fBmemremap\fP is "ioremap" for cases where it is known that the resource
being mapped does not have i/o side effects and the __iomem
annotation is not applicable. In the case of multiple flags, the different
mapping types will be attempted in the order listed below until one of
them succeeds.

MEMREMAP_WB - matches the default mapping for System RAM on
the architecture.  This is usually a read-allocate write-back cache.
Moreover, if MEMREMAP_WB is specified and the requested remap region is RAM
\fBmemremap\fP will bypass establishing a new mapping and instead return
a pointer into the direct map.

MEMREMAP_WT - establish a mapping whereby writes either bypass the
cache or are written through to memory and never exist in a
cache-dirty state with respect to program visibility.  Attempts to
map System RAM with this mapping type will fail.

MEMREMAP_WC - establish a writecombine mapping, whereby writes may
be coalesced together (e.g. in the CPU's write buffers), but is otherwise
uncached. Attempts to map System RAM with this mapping type will fail.
