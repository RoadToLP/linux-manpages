.TH "jbd2_journal_start" 9 "jbd2_journal_start" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
jbd2_journal_start \- Obtain a new handle.
.SH SYNOPSIS
.B "handle_t *" jbd2_journal_start
.BI "(journal_t *journal "  ","
.BI "int nblocks "  ");"
.SH ARGUMENTS
.IP "journal" 12
Journal to start transaction on.
.IP "nblocks" 12
number of block buffer we might modify
.SH "DESCRIPTION"
We make sure that the transaction can guarantee at least nblocks of
modified buffers in the log.  We block until the log can guarantee
that much space. Additionally, if rsv_blocks > 0, we also create another
handle with rsv_blocks reserved blocks in the journal. This handle is
stored in h_rsv_handle. It is not attached to any particular transaction
and thus doesn't block transaction commit. If the caller uses this reserved
handle, it has to set h_rsv_handle to NULL as otherwise \fBjbd2_journal_stop\fP
on the parent handle will dispose the reserved one. Reserved handle has to
be converted to a normal handle using \fBjbd2_journal_start_reserved\fP before
it can be used.

Return a pointer to a newly allocated handle, or an \fBERR_PTR\fP value
on failure.
