.TH "vfs_unlink" 9 "vfs_unlink" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
vfs_unlink \- unlink a filesystem object
.SH SYNOPSIS
.B "int" vfs_unlink
.BI "(struct user_namespace *mnt_userns "  ","
.BI "struct inode *dir "  ","
.BI "struct dentry *dentry "  ","
.BI "struct inode **delegated_inode "  ");"
.SH ARGUMENTS
.IP "mnt_userns" 12
user namespace of the mount the inode was found from
.IP "dir" 12
parent directory
.IP "dentry" 12
victim
.IP "delegated_inode" 12
returns victim inode, if the inode is delegated.
.SH "DESCRIPTION"
The caller must hold dir->i_mutex.

If vfs_unlink discovers a delegation, it will return -EWOULDBLOCK and
return a reference to the inode in delegated_inode.  The caller
should then break the delegation on that inode and retry.  Because
breaking a delegation may take a long time, the caller should drop
dir->i_mutex before doing so.

Alternatively, a caller may pass NULL for delegated_inode.  This may
be appropriate for callers that expect the underlying filesystem not
to be NFS exported.

If the inode has been found through an idmapped mount the user namespace of
the vfsmount must be passed through \fImnt_userns\fP. This function will then take
care to map the inode according to \fImnt_userns\fP before checking permissions.
On non-idmapped mounts or if permission checking is to be performed on the
raw inode simply passs init_user_ns.
