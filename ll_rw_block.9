.TH "ll_rw_block" 9 "ll_rw_block" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
ll_rw_block \- low-level access to block devices (DEPRECATED)
.SH SYNOPSIS
.B "void" ll_rw_block
.BI "(int op "  ","
.BI "int op_flags "  ","
.BI "int nr "  ","
.BI "struct buffer_head *bhs[] "  ");"
.SH ARGUMENTS
.IP "op" 12
whether to READ or WRITE
.IP "op_flags" 12
req_flag_bits
.IP "nr" 12
number of \fIstruct buffer_heads\fP in the array
.IP "bhs" 12
array of pointers to \fIstruct buffer_head\fP
.SH "DESCRIPTION"
\fBll_rw_block\fP takes an array of pointers to \fIstruct buffer_heads\fP, and
requests an I/O operation on them, either a REQ_OP_READ or a REQ_OP_WRITE.
\fIop_flags\fP contains flags modifying the detailed I/O behavior, most notably
REQ_RAHEAD.

This function drops any buffer that it cannot get a lock on (with the
BH_Lock state bit), any buffer that appears to be clean when doing a write
request, and any buffer that appears to be up-to-date when doing read
request.  Further it marks as clean buffers that are processed for
writing (the buffer cache won't assume that they are actually clean
until the buffer gets unlocked).

ll_rw_block sets b_end_io to simple completion handler that marks
the buffer up-to-date (if appropriate), unlocks the buffer and wakes
any waiters. 

All of the buffers must be for the same device, and must also be a
multiple of the current approved size for the device.
