.TH "i915_gem_mmap_gtt_version" 9 "i915_gem_mmap_gtt_version" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
i915_gem_mmap_gtt_version \- report the current feature set for GTT mmaps
.SH SYNOPSIS
.B "int" i915_gem_mmap_gtt_version
.BI "(void "  ");"
.SH ARGUMENTS
.IP "void" 12
no arguments
.SH "DESCRIPTION"

A history of the GTT mmap interface:

0 - Everything had to fit into the GTT. Both parties of a memcpy had to
aligned and suitable for fencing, and still fit into the available
mappable space left by the pinned display objects. A classic problem
we called the page-fault-of-doom where we would ping-pong between
two objects that could not fit inside the GTT and so the memcpy
would page one object in at the expense of the other between every
single byte.

1 - Objects can be any size, and have any compatible fencing (X Y, or none
as set via \fBi915_gem_set_tiling\fP [DRM_I915_GEM_SET_TILING]). If the
object is too large for the available space (or simply too large
for the mappable aperture!), a view is created instead and faulted
into userspace. (This view is aligned and sized appropriately for
fenced access.)

2 - Recognise WC as a separate cache domain so that we can flush the
delayed writes via GTT before performing direct access via WC.

3 - Remove implicit set-domain(GTT) and synchronisation on initial
pagefault; swapin remains transparent.

4 - Support multiple fault handlers per object depending on object's
backing storage (a.k.a. MMAP_OFFSET).

Restrictions:

* snoopable objects cannot be accessed via the GTT. It can cause machine
hangs on some architectures, corruption on others. An attempt to service
a GTT page fault from a snoopable object will generate a SIGBUS.

* the object must be able to fit into RAM (physical memory, though no
limited to the mappable aperture).


Caveats:

* a new GTT page fault will synchronize rendering from the GPU and flush
all data to system memory. Subsequent access will not be synchronized.

* all mappings are revoked on runtime device suspend.

* there are only 8, 16 or 32 fence registers to share between all users
(older machines require fence register for display and blitter access
as well). Contention of the fence registers will cause the previous users
to be unmapped and any new access will generate new page faults.

* running out of memory while servicing a fault may generate a SIGBUS,
rather than the expected SIGSEGV.
