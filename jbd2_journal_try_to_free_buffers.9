.TH "jbd2_journal_try_to_free_buffers" 9 "jbd2_journal_try_to_free_buffers" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
jbd2_journal_try_to_free_buffers \- try to free page buffers.
.SH SYNOPSIS
.B "int" jbd2_journal_try_to_free_buffers
.BI "(journal_t *journal "  ","
.BI "struct page *page "  ");"
.SH ARGUMENTS
.IP "journal" 12
journal for operation
.IP "page" 12
to try and free
.SH "DESCRIPTION"
For all the buffers on this page,
if they are fully written out ordered data, move them onto BUF_CLEAN
so \fBtry_to_free_buffers\fP can reap them.

This function returns non-zero if we wish \fBtry_to_free_buffers\fP
to be called. We do this if the page is releasable by \fBtry_to_free_buffers\fP.
We also do it if the page has locked or dirty buffers and the caller wants
us to perform sync or async writeout.

This complicates JBD locking somewhat.  We aren't protected by the
BKL here.  We wish to remove the buffer from its committing or
running transaction's ->t_datalist via __jbd2_journal_unfile_buffer.

This may *change* the value of transaction_t->t_datalist, so anyone
who looks at t_datalist needs to lock against this function.

Even worse, someone may be doing a jbd2_journal_dirty_data on this
buffer.  So we need to lock against that.  \fBjbd2_journal_dirty_data\fP
will come out of the lock with the buffer dirty, which makes it
ineligible for release here.

Who else is affected by this?  hmm...  Really the only contender
is \fBdo_get_write_access\fP - it could be looking at the buffer while
\fBjournal_try_to_free_buffer\fP is changing its state.  But that
cannot happen because we never reallocate freed data as metadata
while the data is part of a transaction.  Yes?

Return 0 on failure, 1 on success
