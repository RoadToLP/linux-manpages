.TH "bitmap_bitremap" 9 "bitmap_bitremap" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
bitmap_bitremap \- Apply map defined by a pair of bitmaps to a single bit
.SH SYNOPSIS
.B "int" bitmap_bitremap
.BI "(int oldbit "  ","
.BI "const unsigned long *old "  ","
.BI "const unsigned long *new "  ","
.BI "int bits "  ");"
.SH ARGUMENTS
.IP "oldbit" 12
bit position to be mapped
.IP "old" 12
defines domain of map
.IP "new" 12
defines range of map
.IP "bits" 12
number of bits in each of these bitmaps
.SH "DESCRIPTION"
Let \fIold\fP and \fInew\fP define a mapping of bit positions, such that
whatever position is held by the n-th set bit in \fIold\fP is mapped
to the n-th set bit in \fInew\fP.  In the more general case, allowing
for the possibility that the weight 'w' of \fInew\fP is less than the
weight of \fIold\fP, map the position of the n-th set bit in \fIold\fP to
the position of the m-th set bit in \fInew\fP, where m == n % w.

The positions of unset bits in \fIold\fP are mapped to themselves
(the identify map).

Apply the above specified mapping to bit position \fIoldbit\fP, returning
the new bit position.

For example, lets say that \fIold\fP has bits 4 through 7 set, and
\fInew\fP has bits 12 through 15 set.  This defines the mapping of bit
position 4 to 12, 5 to 13, 6 to 14 and 7 to 15, and of all other
bit positions unchanged.  So if say \fIoldbit\fP is 5, then this routine
returns 13.
