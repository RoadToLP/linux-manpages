.TH "drm_atomic_helper_swap_state" 9 "drm_atomic_helper_swap_state" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
drm_atomic_helper_swap_state \- store atomic state into current sw state
.SH SYNOPSIS
.B "int" drm_atomic_helper_swap_state
.BI "(struct drm_atomic_state *state "  ","
.BI "bool stall "  ");"
.SH ARGUMENTS
.IP "state" 12
atomic state
.IP "stall" 12
stall for preceeding commits
.SH "DESCRIPTION"
This function stores the atomic state into the current state pointers in all
driver objects. It should be called after all failing steps have been done
and succeeded, but before the actual hardware state is committed.

For cleanup and error recovery the current state for all changed objects will
be swapped into \fIstate\fP.

With that sequence it fits perfectly into the plane prepare/cleanup sequence:

1. Call \fBdrm_atomic_helper_prepare_planes\fP with the staged atomic state.

2. Do any other steps that might fail.

3. Put the staged state into the current state pointers with this function.

4. Actually commit the hardware state.

5. Call \fBdrm_atomic_helper_cleanup_planes\fP with \fIstate\fP, which since step 3
contains the old state. Also do any other cleanup required with that state.

\fIstall\fP must be set when nonblocking commits for this driver directly access
the \fIdrm_plane.state\fP, \fIdrm_crtc.state\fP or \fIdrm_connector.state\fP pointer. With
the current atomic helpers this is almost always the case, since the helpers
don't pass the right state structures to the callbacks.

Returns 0 on success. Can return -ERESTARTSYS when \fIstall\fP is true and the
waiting for the previous commits has been interrupted.
.SH "RETURN"
