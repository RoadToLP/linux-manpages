.TH "drm_vma_offset_lookup_locked" 9 "drm_vma_offset_lookup_locked" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
drm_vma_offset_lookup_locked \- Find node in offset space
.SH SYNOPSIS
.B "struct drm_vma_offset_node *" drm_vma_offset_lookup_locked
.BI "(struct drm_vma_offset_manager *mgr "  ","
.BI "unsigned long start "  ","
.BI "unsigned long pages "  ");"
.SH ARGUMENTS
.IP "mgr" 12
Manager object
.IP "start" 12
Start address for object (page-based)
.IP "pages" 12
Size of object (page-based)
.SH "DESCRIPTION"
Find a node given a start address and object size. This returns the _best_
match for the given node. That is, \fIstart\fP may point somewhere into a valid
region and the given node will be returned, as long as the node spans the
whole requested area (given the size in number of pages as \fIpages\fP).

Note that before lookup the vma offset manager lookup lock must be acquired
with \fBdrm_vma_offset_lock_lookup\fP. See there for an example. This can then be
used to implement weakly referenced lookups using \fBkref_get_unless_zero\fP.

::

drm_vma_offset_lock_lookup(mgr);
node = drm_vma_offset_lookup_locked(mgr);
if (node)
kref_get_unless_zero(container_of(node, sth, entr));
drm_vma_offset_unlock_lookup(mgr);
.SH "EXAMPLE"
.SH "RETURN"
Returns NULL if no suitable node can be found. Otherwise, the best match
is returned. It's the caller's responsibility to make sure the node doesn't
get destroyed before the caller can access it.
