.TH "drm_fbdev_generic_setup" 9 "drm_fbdev_generic_setup" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
drm_fbdev_generic_setup \- Setup generic fbdev emulation
.SH SYNOPSIS
.B "void" drm_fbdev_generic_setup
.BI "(struct drm_device *dev "  ","
.BI "unsigned int preferred_bpp "  ");"
.SH ARGUMENTS
.IP "dev" 12
DRM device
.IP "preferred_bpp" 12
Preferred bits per pixel for the device.
\fIdev->mode_config.preferred_depth\fP is used if this is zero.
.SH "DESCRIPTION"
This function sets up generic fbdev emulation for drivers that supports
dumb buffers with a virtual address and that can be mmap'ed.
\fBdrm_fbdev_generic_setup\fP shall be called after the DRM driver registered
the new DRM device with \fBdrm_dev_register\fP.

Restore, hotplug events and teardown are all taken care of. Drivers that do
suspend/resume need to call \fBdrm_fb_helper_set_suspend_unlocked\fP themselves.
Simple drivers might use \fBdrm_mode_config_helper_suspend\fP.

Drivers that set the dirty callback on their framebuffer will get a shadow
fbdev buffer that is blitted onto the real buffer. This is done in order to
make deferred I/O work with all kinds of buffers. A shadow buffer can be
requested explicitly by setting struct drm_mode_config.prefer_shadow or
struct drm_mode_config.prefer_shadow_fbdev to true beforehand. This is
required to use generic fbdev emulation with SHMEM helpers.

This function is safe to call even when there are no connectors present.
Setup will be retried on the next hotplug event.

The fbdev is destroyed by \fBdrm_dev_unregister\fP.
