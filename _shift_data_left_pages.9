.TH "_shift_data_left_pages" 9 "_shift_data_left_pages" "May 2021" "Kernel Hacker's Manual" LINUX
.SH NAME
_shift_data_left_pages \- 
.SH SYNOPSIS
.B "void" _shift_data_left_pages
.BI "(struct page **pages "  ","
.BI "size_t pgto_base "  ","
.BI "size_t pgfrom_base "  ","
.BI "size_t len "  ");"
.SH ARGUMENTS
.IP "pages" 12
vector of pages containing both the source and dest memory area.
.IP "pgto_base" 12
page vector address of destination
.IP "pgfrom_base" 12
page vector address of source
.IP "len" 12
number of bytes to copy
.SH "NOTE"
the addresses pgto_base and pgfrom_base are both calculated in
the same way:
if a memory area starts at byte 'base' in page 'pages[i]',
then its address is given as (i << PAGE_CACHE_SHIFT) + base
Alse note: pgto_base must be < pgfrom_base, but the memory areas
they point to may overlap.
